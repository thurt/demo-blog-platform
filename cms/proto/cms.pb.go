// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cms.proto

/*
Package cms is a generated protocol buffer package.

CMS

CMS Service API provides access to CMS entities and supports CMS use-cases

It is generated from these files:
	cms.proto

It has these top-level messages:
	Post
	PostRequest
	GetPostsOptions
	CreatePostRequest
	UpdatePostRequest
	Comment
	CommentRequest
	CreateCommentRequest
	UpdateCommentRequest
	User
	UserRequest
	CreateUserRequest
	CreateUserWithRole
	AuthUserRequest
	AccessToken
	UserPassword
*/
package cms

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/mwitkow/go-proto-validators"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// UserRole
type UserRole int32

const (
	UserRole_UNKNOWN UserRole = 0
	UserRole_ADMIN   UserRole = 1
	UserRole_USER    UserRole = 2
)

var UserRole_name = map[int32]string{
	0: "UNKNOWN",
	1: "ADMIN",
	2: "USER",
}
var UserRole_value = map[string]int32{
	"UNKNOWN": 0,
	"ADMIN":   1,
	"USER":    2,
}

func (x UserRole) String() string {
	return proto.EnumName(UserRole_name, int32(x))
}
func (UserRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Post
type Post struct {
	Id         uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Content    string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Created    string `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	LastEdited string `protobuf:"bytes,5,opt,name=last_edited,json=lastEdited" json:"last_edited,omitempty"`
	Published  string `protobuf:"bytes,6,opt,name=published" json:"published,omitempty"`
	Slug       string `protobuf:"bytes,7,opt,name=slug" json:"slug,omitempty"`
}

func (m *Post) Reset()                    { *m = Post{} }
func (m *Post) String() string            { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()               {}
func (*Post) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Post) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Post) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Post) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Post) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Post) GetLastEdited() string {
	if m != nil {
		return m.LastEdited
	}
	return ""
}

func (m *Post) GetPublished() string {
	if m != nil {
		return m.Published
	}
	return ""
}

func (m *Post) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

// PostRequest
type PostRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *PostRequest) Reset()                    { *m = PostRequest{} }
func (m *PostRequest) String() string            { return proto.CompactTextString(m) }
func (*PostRequest) ProtoMessage()               {}
func (*PostRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PostRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// GetPostsOptions
type GetPostsOptions struct {
	// when true, includes unpublished Posts in response (note: Authorization token with ADMIN role is required)
	IncludeUnPublished bool `protobuf:"varint,2,opt,name=includeUnPublished" json:"includeUnPublished,omitempty"`
}

func (m *GetPostsOptions) Reset()                    { *m = GetPostsOptions{} }
func (m *GetPostsOptions) String() string            { return proto.CompactTextString(m) }
func (*GetPostsOptions) ProtoMessage()               {}
func (*GetPostsOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetPostsOptions) GetIncludeUnPublished() bool {
	if m != nil {
		return m.IncludeUnPublished
	}
	return false
}

// CreatePostRequest
type CreatePostRequest struct {
	Title   string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	Slug    string `protobuf:"bytes,3,opt,name=slug" json:"slug,omitempty"`
}

func (m *CreatePostRequest) Reset()                    { *m = CreatePostRequest{} }
func (m *CreatePostRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePostRequest) ProtoMessage()               {}
func (*CreatePostRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreatePostRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreatePostRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CreatePostRequest) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

// UpdatePostRequest
type UpdatePostRequest struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Slug    string `protobuf:"bytes,4,opt,name=slug" json:"slug,omitempty"`
}

func (m *UpdatePostRequest) Reset()                    { *m = UpdatePostRequest{} }
func (m *UpdatePostRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePostRequest) ProtoMessage()               {}
func (*UpdatePostRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdatePostRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdatePostRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdatePostRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *UpdatePostRequest) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

// Comment
type Comment struct {
	Id         uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Content    string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	Created    string `protobuf:"bytes,3,opt,name=created" json:"created,omitempty"`
	LastEdited string `protobuf:"bytes,4,opt,name=last_edited,json=lastEdited" json:"last_edited,omitempty"`
	UserId     string `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PostId     string `protobuf:"bytes,6,opt,name=post_id,json=postId" json:"post_id,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Comment) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Comment) GetLastEdited() string {
	if m != nil {
		return m.LastEdited
	}
	return ""
}

func (m *Comment) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Comment) GetPostId() string {
	if m != nil {
		return m.PostId
	}
	return ""
}

// CommentRequest
type CommentRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CommentRequest) Reset()                    { *m = CommentRequest{} }
func (m *CommentRequest) String() string            { return proto.CompactTextString(m) }
func (*CommentRequest) ProtoMessage()               {}
func (*CommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CommentRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// CreateCommentRequest
type CreateCommentRequest struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PostId  uint32 `protobuf:"varint,3,opt,name=post_id,json=postId" json:"post_id,omitempty"`
}

func (m *CreateCommentRequest) Reset()                    { *m = CreateCommentRequest{} }
func (m *CreateCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCommentRequest) ProtoMessage()               {}
func (*CreateCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateCommentRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CreateCommentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateCommentRequest) GetPostId() uint32 {
	if m != nil {
		return m.PostId
	}
	return 0
}

// UpdateCommentRequest
type UpdateCommentRequest struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *UpdateCommentRequest) Reset()                    { *m = UpdateCommentRequest{} }
func (m *UpdateCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateCommentRequest) ProtoMessage()               {}
func (*UpdateCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateCommentRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateCommentRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// User
type User struct {
	Id         string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Email      string   `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Created    string   `protobuf:"bytes,3,opt,name=created" json:"created,omitempty"`
	LastActive string   `protobuf:"bytes,4,opt,name=last_active,json=lastActive" json:"last_active,omitempty"`
	Role       UserRole `protobuf:"varint,5,opt,name=role,enum=cms.UserRole" json:"role,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *User) GetLastActive() string {
	if m != nil {
		return m.LastActive
	}
	return ""
}

func (m *User) GetRole() UserRole {
	if m != nil {
		return m.Role
	}
	return UserRole_UNKNOWN
}

// UserRequest
type UserRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// CreateUserRequest
type CreateUserRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CreateUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// CreateUserWithRole
type CreateUserWithRole struct {
	User *CreateUserRequest `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Role UserRole           `protobuf:"varint,2,opt,name=role,enum=cms.UserRole" json:"role,omitempty"`
}

func (m *CreateUserWithRole) Reset()                    { *m = CreateUserWithRole{} }
func (m *CreateUserWithRole) String() string            { return proto.CompactTextString(m) }
func (*CreateUserWithRole) ProtoMessage()               {}
func (*CreateUserWithRole) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CreateUserWithRole) GetUser() *CreateUserRequest {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CreateUserWithRole) GetRole() UserRole {
	if m != nil {
		return m.Role
	}
	return UserRole_UNKNOWN
}

// AuthUserRequest
type AuthUserRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AuthUserRequest) Reset()                    { *m = AuthUserRequest{} }
func (m *AuthUserRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthUserRequest) ProtoMessage()               {}
func (*AuthUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AuthUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AuthUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// AccessToken
type AccessToken struct {
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	TokenType   string `protobuf:"bytes,2,opt,name=token_type,json=tokenType" json:"token_type,omitempty"`
	ExpiresIn   uint32 `protobuf:"varint,3,opt,name=expires_in,json=expiresIn" json:"expires_in,omitempty"`
}

func (m *AccessToken) Reset()                    { *m = AccessToken{} }
func (m *AccessToken) String() string            { return proto.CompactTextString(m) }
func (*AccessToken) ProtoMessage()               {}
func (*AccessToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AccessToken) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AccessToken) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *AccessToken) GetExpiresIn() uint32 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

// UserPassword
type UserPassword struct {
	Password string `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
}

func (m *UserPassword) Reset()                    { *m = UserPassword{} }
func (m *UserPassword) String() string            { return proto.CompactTextString(m) }
func (*UserPassword) ProtoMessage()               {}
func (*UserPassword) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *UserPassword) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*Post)(nil), "cms.Post")
	proto.RegisterType((*PostRequest)(nil), "cms.PostRequest")
	proto.RegisterType((*GetPostsOptions)(nil), "cms.GetPostsOptions")
	proto.RegisterType((*CreatePostRequest)(nil), "cms.CreatePostRequest")
	proto.RegisterType((*UpdatePostRequest)(nil), "cms.UpdatePostRequest")
	proto.RegisterType((*Comment)(nil), "cms.Comment")
	proto.RegisterType((*CommentRequest)(nil), "cms.CommentRequest")
	proto.RegisterType((*CreateCommentRequest)(nil), "cms.CreateCommentRequest")
	proto.RegisterType((*UpdateCommentRequest)(nil), "cms.UpdateCommentRequest")
	proto.RegisterType((*User)(nil), "cms.User")
	proto.RegisterType((*UserRequest)(nil), "cms.UserRequest")
	proto.RegisterType((*CreateUserRequest)(nil), "cms.CreateUserRequest")
	proto.RegisterType((*CreateUserWithRole)(nil), "cms.CreateUserWithRole")
	proto.RegisterType((*AuthUserRequest)(nil), "cms.AuthUserRequest")
	proto.RegisterType((*AccessToken)(nil), "cms.AccessToken")
	proto.RegisterType((*UserPassword)(nil), "cms.UserPassword")
	proto.RegisterEnum("cms.UserRole", UserRole_name, UserRole_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CmsInternal service

type CmsInternalClient interface {
	GetUserPassword(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserPassword, error)
}

type cmsInternalClient struct {
	cc *grpc.ClientConn
}

func NewCmsInternalClient(cc *grpc.ClientConn) CmsInternalClient {
	return &cmsInternalClient{cc}
}

func (c *cmsInternalClient) GetUserPassword(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserPassword, error) {
	out := new(UserPassword)
	err := grpc.Invoke(ctx, "/cms.CmsInternal/GetUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CmsInternal service

type CmsInternalServer interface {
	GetUserPassword(context.Context, *UserRequest) (*UserPassword, error)
}

func RegisterCmsInternalServer(s *grpc.Server, srv CmsInternalServer) {
	s.RegisterService(&_CmsInternal_serviceDesc, srv)
}

func _CmsInternal_GetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsInternalServer).GetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CmsInternal/GetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsInternalServer).GetUserPassword(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CmsInternal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cms.CmsInternal",
	HandlerType: (*CmsInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPassword",
			Handler:    _CmsInternal_GetUserPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cms.proto",
}

// Client API for CmsAuth service

type CmsAuthClient interface {
	ActivateNewTokenForUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*AccessToken, error)
}

type cmsAuthClient struct {
	cc *grpc.ClientConn
}

func NewCmsAuthClient(cc *grpc.ClientConn) CmsAuthClient {
	return &cmsAuthClient{cc}
}

func (c *cmsAuthClient) ActivateNewTokenForUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*AccessToken, error) {
	out := new(AccessToken)
	err := grpc.Invoke(ctx, "/cms.CmsAuth/ActivateNewTokenForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CmsAuth service

type CmsAuthServer interface {
	ActivateNewTokenForUser(context.Context, *User) (*AccessToken, error)
}

func RegisterCmsAuthServer(s *grpc.Server, srv CmsAuthServer) {
	s.RegisterService(&_CmsAuth_serviceDesc, srv)
}

func _CmsAuth_ActivateNewTokenForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAuthServer).ActivateNewTokenForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CmsAuth/ActivateNewTokenForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAuthServer).ActivateNewTokenForUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _CmsAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cms.CmsAuth",
	HandlerType: (*CmsAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivateNewTokenForUser",
			Handler:    _CmsAuth_ActivateNewTokenForUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cms.proto",
}

// Client API for Cms service

type CmsClient interface {
	// Setup the application
	Setup(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserRequest, error)
	// Check if application is setup
	IsSetup(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf2.BoolValue, error)
	// Create a post
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*PostRequest, error)
	// Get a post
	GetPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Post, error)
	// Update a post
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Delete a post
	DeletePost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get all comments by post
	GetPostComments(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (Cms_GetPostCommentsClient, error)
	// Get all posts
	GetPosts(ctx context.Context, in *GetPostsOptions, opts ...grpc.CallOption) (Cms_GetPostsClient, error)
	// Publish a post
	PublishPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// UnPublish a post
	UnPublishPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Create a user
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserRequest, error)
	// Get a user
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
	// Delete a user
	DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get all comments by user
	GetUserComments(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (Cms_GetUserCommentsClient, error)
	// Create a comment
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CommentRequest, error)
	// Get a comment
	GetComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*Comment, error)
	// Update a comment
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Delete a comment
	DeleteComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get all comments
	GetComments(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (Cms_GetCommentsClient, error)
	// Authorize as a user to get an access token
	AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AccessToken, error)
}

type cmsClient struct {
	cc *grpc.ClientConn
}

func NewCmsClient(cc *grpc.ClientConn) CmsClient {
	return &cmsClient{cc}
}

func (c *cmsClient) Setup(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserRequest, error) {
	out := new(UserRequest)
	err := grpc.Invoke(ctx, "/cms.Cms/Setup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) IsSetup(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf2.BoolValue, error) {
	out := new(google_protobuf2.BoolValue)
	err := grpc.Invoke(ctx, "/cms.Cms/IsSetup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*PostRequest, error) {
	out := new(PostRequest)
	err := grpc.Invoke(ctx, "/cms.Cms/CreatePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := grpc.Invoke(ctx, "/cms.Cms/GetPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Cms/UpdatePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) DeletePost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Cms/DeletePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetPostComments(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (Cms_GetPostCommentsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cms_serviceDesc.Streams[0], c.cc, "/cms.Cms/GetPostComments", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmsGetPostCommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cms_GetPostCommentsClient interface {
	Recv() (*Comment, error)
	grpc.ClientStream
}

type cmsGetPostCommentsClient struct {
	grpc.ClientStream
}

func (x *cmsGetPostCommentsClient) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cmsClient) GetPosts(ctx context.Context, in *GetPostsOptions, opts ...grpc.CallOption) (Cms_GetPostsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cms_serviceDesc.Streams[1], c.cc, "/cms.Cms/GetPosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmsGetPostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cms_GetPostsClient interface {
	Recv() (*Post, error)
	grpc.ClientStream
}

type cmsGetPostsClient struct {
	grpc.ClientStream
}

func (x *cmsGetPostsClient) Recv() (*Post, error) {
	m := new(Post)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cmsClient) PublishPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Cms/PublishPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) UnPublishPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Cms/UnPublishPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserRequest, error) {
	out := new(UserRequest)
	err := grpc.Invoke(ctx, "/cms.Cms/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/cms.Cms/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Cms/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetUserComments(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (Cms_GetUserCommentsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cms_serviceDesc.Streams[2], c.cc, "/cms.Cms/GetUserComments", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmsGetUserCommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cms_GetUserCommentsClient interface {
	Recv() (*Comment, error)
	grpc.ClientStream
}

type cmsGetUserCommentsClient struct {
	grpc.ClientStream
}

func (x *cmsGetUserCommentsClient) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cmsClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CommentRequest, error) {
	out := new(CommentRequest)
	err := grpc.Invoke(ctx, "/cms.Cms/CreateComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := grpc.Invoke(ctx, "/cms.Cms/GetComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Cms/UpdateComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) DeleteComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Cms/DeleteComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetComments(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (Cms_GetCommentsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cms_serviceDesc.Streams[3], c.cc, "/cms.Cms/GetComments", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmsGetCommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cms_GetCommentsClient interface {
	Recv() (*Comment, error)
	grpc.ClientStream
}

type cmsGetCommentsClient struct {
	grpc.ClientStream
}

func (x *cmsGetCommentsClient) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cmsClient) AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AccessToken, error) {
	out := new(AccessToken)
	err := grpc.Invoke(ctx, "/cms.Cms/AuthUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cms service

type CmsServer interface {
	// Setup the application
	Setup(context.Context, *CreateUserRequest) (*UserRequest, error)
	// Check if application is setup
	IsSetup(context.Context, *google_protobuf1.Empty) (*google_protobuf2.BoolValue, error)
	// Create a post
	CreatePost(context.Context, *CreatePostRequest) (*PostRequest, error)
	// Get a post
	GetPost(context.Context, *PostRequest) (*Post, error)
	// Update a post
	UpdatePost(context.Context, *UpdatePostRequest) (*google_protobuf1.Empty, error)
	// Delete a post
	DeletePost(context.Context, *PostRequest) (*google_protobuf1.Empty, error)
	// Get all comments by post
	GetPostComments(*PostRequest, Cms_GetPostCommentsServer) error
	// Get all posts
	GetPosts(*GetPostsOptions, Cms_GetPostsServer) error
	// Publish a post
	PublishPost(context.Context, *PostRequest) (*google_protobuf1.Empty, error)
	// UnPublish a post
	UnPublishPost(context.Context, *PostRequest) (*google_protobuf1.Empty, error)
	// Create a user
	CreateUser(context.Context, *CreateUserRequest) (*UserRequest, error)
	// Get a user
	GetUser(context.Context, *UserRequest) (*User, error)
	// Delete a user
	DeleteUser(context.Context, *UserRequest) (*google_protobuf1.Empty, error)
	// Get all comments by user
	GetUserComments(*UserRequest, Cms_GetUserCommentsServer) error
	// Create a comment
	CreateComment(context.Context, *CreateCommentRequest) (*CommentRequest, error)
	// Get a comment
	GetComment(context.Context, *CommentRequest) (*Comment, error)
	// Update a comment
	UpdateComment(context.Context, *UpdateCommentRequest) (*google_protobuf1.Empty, error)
	// Delete a comment
	DeleteComment(context.Context, *CommentRequest) (*google_protobuf1.Empty, error)
	// Get all comments
	GetComments(*google_protobuf1.Empty, Cms_GetCommentsServer) error
	// Authorize as a user to get an access token
	AuthUser(context.Context, *AuthUserRequest) (*AccessToken, error)
}

func RegisterCmsServer(s *grpc.Server, srv CmsServer) {
	s.RegisterService(&_Cms_serviceDesc, srv)
}

func _Cms_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).Setup(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_IsSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).IsSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/IsSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).IsSetup(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetPost(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).DeletePost(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetPostComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PostRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmsServer).GetPostComments(m, &cmsGetPostCommentsServer{stream})
}

type Cms_GetPostCommentsServer interface {
	Send(*Comment) error
	grpc.ServerStream
}

type cmsGetPostCommentsServer struct {
	grpc.ServerStream
}

func (x *cmsGetPostCommentsServer) Send(m *Comment) error {
	return x.ServerStream.SendMsg(m)
}

func _Cms_GetPosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPostsOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmsServer).GetPosts(m, &cmsGetPostsServer{stream})
}

type Cms_GetPostsServer interface {
	Send(*Post) error
	grpc.ServerStream
}

type cmsGetPostsServer struct {
	grpc.ServerStream
}

func (x *cmsGetPostsServer) Send(m *Post) error {
	return x.ServerStream.SendMsg(m)
}

func _Cms_PublishPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).PublishPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/PublishPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).PublishPost(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_UnPublishPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).UnPublishPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/UnPublishPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).UnPublishPost(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).DeleteUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetUserComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmsServer).GetUserComments(m, &cmsGetUserCommentsServer{stream})
}

type Cms_GetUserCommentsServer interface {
	Send(*Comment) error
	grpc.ServerStream
}

type cmsGetUserCommentsServer struct {
	grpc.ServerStream
}

func (x *cmsGetUserCommentsServer) Send(m *Comment) error {
	return x.ServerStream.SendMsg(m)
}

func _Cms_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).DeleteComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmsServer).GetComments(m, &cmsGetCommentsServer{stream})
}

type Cms_GetCommentsServer interface {
	Send(*Comment) error
	grpc.ServerStream
}

type cmsGetCommentsServer struct {
	grpc.ServerStream
}

func (x *cmsGetCommentsServer) Send(m *Comment) error {
	return x.ServerStream.SendMsg(m)
}

func _Cms_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/AuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).AuthUser(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cms_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cms.Cms",
	HandlerType: (*CmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _Cms_Setup_Handler,
		},
		{
			MethodName: "IsSetup",
			Handler:    _Cms_IsSetup_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _Cms_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _Cms_GetPost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _Cms_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Cms_DeletePost_Handler,
		},
		{
			MethodName: "PublishPost",
			Handler:    _Cms_PublishPost_Handler,
		},
		{
			MethodName: "UnPublishPost",
			Handler:    _Cms_UnPublishPost_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Cms_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Cms_GetUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Cms_DeleteUser_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _Cms_CreateComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _Cms_GetComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _Cms_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Cms_DeleteComment_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _Cms_AuthUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPostComments",
			Handler:       _Cms_GetPostComments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPosts",
			Handler:       _Cms_GetPosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserComments",
			Handler:       _Cms_GetUserComments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetComments",
			Handler:       _Cms_GetComments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cms.proto",
}

func init() { proto.RegisterFile("cms.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x17, 0x35, 0x25, 0x59, 0x3f, 0x57, 0x96, 0x23, 0x4f, 0xfc, 0x39, 0x8a, 0xbe, 0xa4, 0x62, 0xd8,
	0x14, 0x08, 0x84, 0x58, 0x4a, 0x6c, 0xa0, 0x30, 0xd2, 0x76, 0xe1, 0x9f, 0xd4, 0x15, 0xd2, 0x3a,
	0x8e, 0x62, 0x27, 0x41, 0x8b, 0xc4, 0xa0, 0xc9, 0x89, 0x45, 0x84, 0xe2, 0xb0, 0x9c, 0xa1, 0x6d,
	0x35, 0x08, 0x20, 0x74, 0x99, 0x6d, 0x1f, 0xa0, 0x7d, 0x87, 0xbe, 0x41, 0x1f, 0xa0, 0x9b, 0x76,
	0x2f, 0x40, 0xe8, 0xb2, 0x0f, 0x51, 0xcc, 0x70, 0xf8, 0x23, 0xc9, 0x8a, 0x83, 0xa0, 0x85, 0x77,
	0x9c, 0xb9, 0x33, 0x77, 0xce, 0x39, 0xf7, 0xcc, 0xf0, 0x42, 0xc1, 0xe8, 0xd2, 0x86, 0xeb, 0x11,
	0x46, 0x50, 0xda, 0xe8, 0xd2, 0xea, 0xb5, 0x23, 0x42, 0x8e, 0x6c, 0xdc, 0xd4, 0x5d, 0xab, 0xa9,
	0x3b, 0x0e, 0x61, 0x3a, 0xb3, 0x88, 0x23, 0x97, 0x54, 0xff, 0x2f, 0xa3, 0x62, 0x74, 0xe8, 0xbf,
	0x6c, 0xe2, 0xae, 0xcb, 0x7a, 0x32, 0xf8, 0xd1, 0x78, 0xf0, 0xc4, 0xd3, 0x5d, 0x17, 0x7b, 0xe1,
	0xe6, 0x4f, 0x8f, 0x2c, 0xd6, 0xf1, 0x0f, 0x1b, 0x06, 0xe9, 0x36, 0xbb, 0x27, 0x16, 0x7b, 0x45,
	0x4e, 0x9a, 0x47, 0x64, 0x59, 0x04, 0x97, 0x8f, 0x75, 0xdb, 0x32, 0x75, 0x46, 0x3c, 0xda, 0x8c,
	0x3e, 0x83, 0x7d, 0xda, 0xaf, 0x0a, 0x64, 0x76, 0x09, 0x65, 0x68, 0x1e, 0x52, 0x96, 0x59, 0x51,
	0x54, 0xe5, 0x56, 0xa9, 0x9d, 0xb2, 0x4c, 0xb4, 0x08, 0xb3, 0xcc, 0x62, 0x36, 0xae, 0xa4, 0x54,
	0xe5, 0x56, 0xa1, 0x1d, 0x0c, 0x50, 0x05, 0x72, 0x06, 0x71, 0x18, 0x76, 0x58, 0x25, 0x2d, 0xe6,
	0xc3, 0xa1, 0x88, 0x78, 0x58, 0x67, 0xd8, 0xac, 0x64, 0x64, 0x24, 0x18, 0xa2, 0x1a, 0x14, 0x6d,
	0x9d, 0xb2, 0x03, 0x6c, 0x5a, 0x3c, 0x3a, 0x2b, 0xa2, 0xc0, 0xa7, 0xee, 0x8b, 0x19, 0x74, 0x0d,
	0x0a, 0xae, 0x7f, 0x68, 0x5b, 0xb4, 0x83, 0xcd, 0x4a, 0x56, 0x84, 0xe3, 0x09, 0x84, 0x20, 0x43,
	0x6d, 0xff, 0xa8, 0x92, 0x13, 0x01, 0xf1, 0xad, 0x7d, 0x02, 0x45, 0x0e, 0xba, 0x8d, 0xbf, 0xf7,
	0x31, 0x65, 0x68, 0x29, 0xc6, 0xbe, 0x91, 0x1d, 0x0e, 0x6a, 0xa9, 0xf2, 0x0c, 0xe7, 0xa0, 0xad,
	0xc3, 0xa5, 0x6d, 0xcc, 0xf8, 0x4a, 0xfa, 0xd0, 0x15, 0x52, 0xa3, 0x06, 0x20, 0xcb, 0x31, 0x6c,
	0xdf, 0xc4, 0xfb, 0xce, 0x6e, 0x74, 0x28, 0xe7, 0x98, 0x6f, 0x9f, 0x11, 0xd1, 0xfe, 0x54, 0x60,
	0x61, 0x53, 0x10, 0x49, 0x1e, 0x78, 0x3d, 0x14, 0x87, 0x9f, 0x59, 0xd8, 0xc8, 0x0d, 0x07, 0xb5,
	0xf4, 0x69, 0x3f, 0x15, 0xaa, 0xf4, 0x71, 0xac, 0x92, 0x50, 0x6f, 0xa3, 0x30, 0x1c, 0xd4, 0x66,
	0x4f, 0xfb, 0xfd, 0x7e, 0x3e, 0x16, 0xec, 0xb5, 0xe4, 0x25, 0x74, 0xdc, 0x38, 0x1a, 0x0e, 0x6a,
	0x46, 0xfd, 0xc5, 0x16, 0x51, 0x1d, 0xc2, 0x54, 0x09, 0x44, 0xd5, 0x55, 0xbe, 0x44, 0x3d, 0xd6,
	0x6d, 0x1f, 0xab, 0x96, 0xa3, 0xf6, 0x88, 0xef, 0xa9, 0x5e, 0x00, 0xa2, 0xa1, 0xee, 0x75, 0x2c,
	0xaa, 0xbe, 0xb4, 0xb0, 0x6d, 0xaa, 0x16, 0x55, 0x89, 0x63, 0xf7, 0x54, 0x9f, 0x62, 0x53, 0xb5,
	0x1c, 0x86, 0x3d, 0x47, 0xb7, 0xed, 0x9e, 0x7a, 0xd8, 0x53, 0x59, 0x07, 0xab, 0x14, 0x7b, 0xc7,
	0xd8, 0x6b, 0xf4, 0x95, 0x19, 0x29, 0xe0, 0xdf, 0x0a, 0x2c, 0xec, 0xbb, 0xe6, 0x18, 0xad, 0x29,
	0x3a, 0xc6, 0x74, 0x53, 0xe7, 0xd1, 0x4d, 0x9f, 0x4b, 0x37, 0x73, 0x11, 0x74, 0x7f, 0x51, 0x20,
	0xb7, 0x49, 0xba, 0x5d, 0x0e, 0x64, 0xdc, 0xe8, 0x95, 0xb1, 0x62, 0x9d, 0x69, 0xe9, 0xf4, 0x3b,
	0x2d, 0x9d, 0x99, 0xb0, 0xf4, 0x15, 0xc8, 0xf9, 0x14, 0x7b, 0x07, 0x56, 0xe8, 0xf7, 0x2c, 0x1f,
	0xb6, 0x44, 0xc0, 0x25, 0x94, 0xf1, 0x40, 0xe0, 0xf4, 0x2c, 0x1f, 0xb6, 0x4c, 0xed, 0x16, 0xcc,
	0x4b, 0x84, 0xe7, 0xb9, 0xfa, 0x77, 0x05, 0x16, 0x03, 0x4b, 0x8e, 0x6d, 0xb8, 0x19, 0x33, 0x09,
	0x7c, 0x09, 0xc3, 0x41, 0x2d, 0xfb, 0x4c, 0x39, 0xed, 0xf7, 0x33, 0x31, 0x2b, 0x12, 0x43, 0x0b,
	0xca, 0xf9, 0x64, 0x38, 0xa8, 0xb5, 0xa1, 0xfc, 0xe2, 0x3b, 0x7d, 0xf9, 0x87, 0xf5, 0xe5, 0x6f,
	0x9f, 0xbf, 0x5e, 0xbd, 0x7d, 0x77, 0xed, 0xcd, 0xcd, 0xfa, 0xe7, 0xfb, 0x14, 0x7b, 0x6a, 0xcb,
	0x54, 0xbb, 0x3e, 0x65, 0xea, 0x21, 0x56, 0x57, 0x97, 0xef, 0xae, 0xa9, 0x46, 0x47, 0xf7, 0x74,
	0x83, 0x61, 0x8f, 0xaa, 0xba, 0x63, 0xaa, 0x86, 0xee, 0x04, 0xa5, 0x08, 0x6b, 0x68, 0x63, 0xc6,
	0x83, 0xcf, 0x94, 0x88, 0x72, 0x2d, 0xa6, 0x9c, 0x1e, 0x21, 0x13, 0x52, 0xdf, 0x83, 0xc5, 0xc0,
	0x8b, 0xef, 0x27, 0x40, 0x92, 0x67, 0x6a, 0x2a, 0x4f, 0xed, 0xad, 0x02, 0x19, 0xce, 0x20, 0x51,
	0xf0, 0x42, 0xf8, 0xb2, 0xe1, 0xae, 0x6e, 0xd9, 0xe1, 0xcb, 0x26, 0x06, 0xef, 0x51, 0x6c, 0xdd,
	0x60, 0xd6, 0x31, 0x4e, 0x16, 0x7b, 0x5d, 0xcc, 0xa0, 0x1b, 0x90, 0xf1, 0x88, 0x8d, 0x45, 0xa5,
	0xe7, 0x57, 0x4a, 0x0d, 0xfe, 0xea, 0xf3, 0x93, 0xdb, 0xc4, 0xc6, 0x6d, 0x11, 0xd2, 0x7c, 0x28,
	0x8a, 0x19, 0xc9, 0xec, 0x65, 0x0c, 0xe9, 0x3f, 0x93, 0x9f, 0x5b, 0xe5, 0xb7, 0xe8, 0xf5, 0xba,
	0x80, 0xd3, 0x51, 0x6d, 0x44, 0xe8, 0xe0, 0x55, 0xe0, 0x55, 0x4a, 0x85, 0x9a, 0xdf, 0x84, 0xbc,
	0xab, 0x53, 0x7a, 0x42, 0x3c, 0x29, 0xfa, 0x46, 0x7e, 0x38, 0xa8, 0x65, 0x9e, 0x29, 0xa7, 0xab,
	0xed, 0x28, 0xa2, 0x19, 0x80, 0x62, 0x0e, 0x4f, 0x2d, 0xd6, 0xe1, 0xba, 0xa2, 0x3a, 0x64, 0xb8,
	0xbf, 0x04, 0x8d, 0xe2, 0xca, 0x92, 0x10, 0x7d, 0x82, 0x6a, 0x5b, 0xac, 0x89, 0x0a, 0x94, 0x9a,
	0x5e, 0xa0, 0x9f, 0x15, 0xb8, 0xb4, 0xee, 0xb3, 0xce, 0x45, 0xe8, 0x94, 0x94, 0x21, 0x35, 0x55,
	0x06, 0x07, 0x8a, 0xeb, 0x86, 0x81, 0x29, 0xdd, 0x23, 0xaf, 0xb0, 0x83, 0x6e, 0xc0, 0x9c, 0x2e,
	0x86, 0x07, 0x8c, 0x8f, 0xa5, 0xbf, 0x8b, 0x7a, 0x62, 0xc9, 0x75, 0x00, 0x11, 0x3b, 0x60, 0x3d,
	0x37, 0xfc, 0x8f, 0x17, 0xc4, 0xcc, 0x5e, 0xcf, 0xc5, 0x3c, 0x8c, 0x4f, 0x5d, 0xcb, 0xc3, 0xf4,
	0xc0, 0x72, 0x82, 0xab, 0xd9, 0x2e, 0xc8, 0x99, 0x96, 0xa3, 0xd5, 0x61, 0x8e, 0x73, 0xdb, 0x95,
	0xe7, 0xa3, 0x6a, 0x02, 0x65, 0x70, 0x58, 0x34, 0xae, 0xdf, 0x86, 0x7c, 0xa8, 0x27, 0x2a, 0x42,
	0x6e, 0x7f, 0xe7, 0xc1, 0xce, 0xc3, 0xa7, 0x3b, 0xe5, 0x19, 0x54, 0x80, 0xd9, 0xf5, 0xad, 0x6f,
	0x5a, 0x3b, 0x65, 0x05, 0xe5, 0x21, 0xb3, 0xff, 0xf8, 0x7e, 0xbb, 0x9c, 0x5a, 0xd9, 0x86, 0xe2,
	0x66, 0x97, 0xb6, 0xe4, 0xb3, 0x8d, 0xd6, 0xc4, 0x5f, 0x7a, 0xe4, 0xac, 0x72, 0x5c, 0xa2, 0xa0,
	0x16, 0xd5, 0x85, 0x68, 0x26, 0x5c, 0xa4, 0xcd, 0xac, 0x6c, 0x42, 0x6e, 0xb3, 0x4b, 0x79, 0xd9,
	0xd0, 0x1a, 0x5c, 0x11, 0xb7, 0x51, 0x67, 0x78, 0x07, 0x9f, 0x08, 0xfe, 0x5f, 0x12, 0x4f, 0xdc,
	0xff, 0x42, 0xb4, 0xb5, 0x1a, 0xe4, 0x4d, 0xc8, 0xa8, 0xcd, 0xac, 0xbc, 0x9d, 0x83, 0xf4, 0x66,
	0x97, 0xa2, 0x2d, 0x98, 0x7d, 0x8c, 0x99, 0xef, 0xa2, 0x29, 0x5e, 0xaa, 0x4e, 0x80, 0xd2, 0x16,
	0x7e, 0xfc, 0xe3, 0xaf, 0x9f, 0x52, 0x45, 0x2d, 0xdb, 0xa4, 0x7c, 0xe7, 0x3d, 0xa5, 0x8e, 0x76,
	0x21, 0xd7, 0xa2, 0x61, 0x9e, 0xa0, 0x67, 0x6b, 0x84, 0x3d, 0x5b, 0xe3, 0x3e, 0x6f, 0xe8, 0xaa,
	0xd5, 0x89, 0xf9, 0x0d, 0x42, 0xec, 0x27, 0xfc, 0xa7, 0x17, 0x66, 0x44, 0x85, 0xa6, 0x45, 0x97,
	0x45, 0x52, 0xd4, 0x02, 0x88, 0x1b, 0x90, 0x11, 0x70, 0x89, 0x5f, 0xb7, 0x04, 0x97, 0x98, 0x49,
	0x80, 0xe3, 0xcf, 0x2c, 0xe5, 0xe0, 0x3e, 0x83, 0x9c, 0xec, 0x87, 0xd0, 0xc4, 0xfa, 0x6a, 0x21,
	0x9a, 0xd1, 0x2e, 0x8b, 0xad, 0x25, 0x54, 0x0c, 0xb6, 0x36, 0x5f, 0x5b, 0xe6, 0x1b, 0xb4, 0x07,
	0x10, 0x77, 0x0c, 0x12, 0xc7, 0x44, 0x0b, 0x51, 0x9d, 0x42, 0x5a, 0x5b, 0x12, 0x29, 0xcb, 0xd5,
	0x64, 0x4a, 0x0e, 0xe9, 0x01, 0xc0, 0x16, 0xb6, 0xb1, 0xcc, 0x3a, 0x89, 0x6a, 0x5a, 0x3e, 0x09,
	0xb1, 0x3e, 0x02, 0xf1, 0x51, 0xd4, 0xef, 0xc9, 0x3f, 0x09, 0x3d, 0x23, 0xe3, 0x5c, 0xa0, 0x60,
	0xb0, 0x40, 0xbb, 0x26, 0xf2, 0x2c, 0xa1, 0xc5, 0x44, 0x9e, 0xa6, 0x21, 0x77, 0xdf, 0x51, 0xd0,
	0x17, 0x90, 0x0f, 0x5b, 0x48, 0xb4, 0x28, 0x76, 0x8e, 0x75, 0x94, 0x49, 0xdd, 0xe6, 0x45, 0xb2,
	0x3c, 0x92, 0x92, 0xdf, 0x51, 0xd0, 0xd7, 0x50, 0x94, 0xbd, 0xe4, 0x87, 0xf1, 0x1b, 0xd1, 0x0b,
	0xed, 0x40, 0x29, 0xea, 0x4d, 0xff, 0x8d, 0x7c, 0x91, 0xb5, 0xc4, 0x3d, 0xf9, 0x10, 0xdf, 0xf3,
	0xe7, 0x35, 0x61, 0x2d, 0x91, 0x67, 0xf2, 0xf2, 0xc6, 0x37, 0x30, 0x61, 0x2d, 0xb1, 0x35, 0xc0,
	0x11, 0x99, 0x60, 0xca, 0xfe, 0xf3, 0x4d, 0x90, 0x48, 0xf6, 0x28, 0x7a, 0x4e, 0xc6, 0x4c, 0x90,
	0xcc, 0x38, 0xcd, 0x04, 0x71, 0x9e, 0xa4, 0x09, 0xf6, 0xa1, 0x34, 0xd2, 0x70, 0xa1, 0xab, 0x09,
	0xa9, 0x46, 0x9b, 0x96, 0xea, 0xe5, 0x64, 0xe6, 0x50, 0xb0, 0x45, 0x71, 0xc0, 0xbc, 0x56, 0x88,
	0xb2, 0x72, 0xcd, 0xb6, 0x01, 0xb6, 0x71, 0x68, 0x55, 0x74, 0xd6, 0xc6, 0x31, 0x9c, 0xf2, 0x12,
	0xa1, 0xf9, 0x28, 0x4d, 0x40, 0xf9, 0x39, 0x94, 0x46, 0x1a, 0x28, 0x89, 0xef, 0xac, 0xa6, 0x6a,
	0xaa, 0x96, 0x57, 0x45, 0xee, 0xcb, 0xd5, 0xb1, 0xdc, 0x1c, 0xe7, 0x1e, 0x94, 0x82, 0xf2, 0xbc,
	0x13, 0xea, 0x39, 0x37, 0xbf, 0x3e, 0x0e, 0xfa, 0x2b, 0x28, 0xc6, 0xec, 0xe9, 0xd4, 0xd7, 0x72,
	0x54, 0x81, 0xf8, 0x7d, 0x4c, 0x94, 0xa7, 0x05, 0xf9, 0xf0, 0xd7, 0x2d, 0xef, 0xe8, 0xd8, 0x9f,
	0xfc, 0x8c, 0x77, 0xff, 0x7f, 0x22, 0xd1, 0x25, 0x0d, 0x9a, 0xba, 0xcf, 0x3a, 0xa2, 0xee, 0xf7,
	0x94, 0xfa, 0x61, 0x56, 0x9c, 0xbe, 0xfa, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x85, 0xbb, 0x89,
	0xb6, 0xba, 0x0f, 0x00, 0x00,
}
