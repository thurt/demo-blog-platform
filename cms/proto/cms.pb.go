// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cms.proto

/*
Package cms is a generated protocol buffer package.

CMS

CMS Service API provides access to CMS entities and supports CMS use-cases

It is generated from these files:
	cms.proto

It has these top-level messages:
	Post
	PostRequest
	PostBySlugRequest
	CreatePostRequest
	CreatePostWithSlug
	UpdatePostRequest
	UpdatePostWithSlug
	Comment
	CommentRequest
	CreateCommentRequest
	UpdateCommentRequest
	User
	UserRequest
	CreateUserRequest
	CreateUserWithRole
	AuthUserRequest
	AccessToken
	StrAndHash
	VerifyNewUserRequest
	Email
	UserPassword
*/
package cms

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/mwitkow/go-proto-validators"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// UserRole
type UserRole int32

const (
	UserRole_UNKNOWN UserRole = 0
	UserRole_ADMIN   UserRole = 1
	UserRole_USER    UserRole = 2
)

var UserRole_name = map[int32]string{
	0: "UNKNOWN",
	1: "ADMIN",
	2: "USER",
}
var UserRole_value = map[string]int32{
	"UNKNOWN": 0,
	"ADMIN":   1,
	"USER":    2,
}

func (x UserRole) String() string {
	return proto.EnumName(UserRole_name, int32(x))
}
func (UserRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Post
type Post struct {
	Id         uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title      string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Content    string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Created    string `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	LastEdited string `protobuf:"bytes,5,opt,name=last_edited,json=lastEdited" json:"last_edited,omitempty"`
	Slug       string `protobuf:"bytes,7,opt,name=slug" json:"slug,omitempty"`
}

func (m *Post) Reset()                    { *m = Post{} }
func (m *Post) String() string            { return proto.CompactTextString(m) }
func (*Post) ProtoMessage()               {}
func (*Post) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Post) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Post) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Post) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Post) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Post) GetLastEdited() string {
	if m != nil {
		return m.LastEdited
	}
	return ""
}

func (m *Post) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

// PostRequest
type PostRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *PostRequest) Reset()                    { *m = PostRequest{} }
func (m *PostRequest) String() string            { return proto.CompactTextString(m) }
func (*PostRequest) ProtoMessage()               {}
func (*PostRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PostRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// PostRequestBySlug
type PostBySlugRequest struct {
	Slug string `protobuf:"bytes,1,opt,name=slug" json:"slug,omitempty"`
}

func (m *PostBySlugRequest) Reset()                    { *m = PostBySlugRequest{} }
func (m *PostBySlugRequest) String() string            { return proto.CompactTextString(m) }
func (*PostBySlugRequest) ProtoMessage()               {}
func (*PostBySlugRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PostBySlugRequest) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

// CreatePostRequest
type CreatePostRequest struct {
	Title   string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *CreatePostRequest) Reset()                    { *m = CreatePostRequest{} }
func (m *CreatePostRequest) String() string            { return proto.CompactTextString(m) }
func (*CreatePostRequest) ProtoMessage()               {}
func (*CreatePostRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreatePostRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreatePostRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// CreatePostWithSlug
type CreatePostWithSlug struct {
	Post *CreatePostRequest `protobuf:"bytes,1,opt,name=post" json:"post,omitempty"`
	Slug string             `protobuf:"bytes,2,opt,name=slug" json:"slug,omitempty"`
}

func (m *CreatePostWithSlug) Reset()                    { *m = CreatePostWithSlug{} }
func (m *CreatePostWithSlug) String() string            { return proto.CompactTextString(m) }
func (*CreatePostWithSlug) ProtoMessage()               {}
func (*CreatePostWithSlug) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreatePostWithSlug) GetPost() *CreatePostRequest {
	if m != nil {
		return m.Post
	}
	return nil
}

func (m *CreatePostWithSlug) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

// UpdatePostRequest
type UpdatePostRequest struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title     string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Content   string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Published bool   `protobuf:"varint,4,opt,name=published" json:"published,omitempty"`
}

func (m *UpdatePostRequest) Reset()                    { *m = UpdatePostRequest{} }
func (m *UpdatePostRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePostRequest) ProtoMessage()               {}
func (*UpdatePostRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdatePostRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdatePostRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdatePostRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *UpdatePostRequest) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

// UpdatePostWithSlug
type UpdatePostWithSlug struct {
	Post *UpdatePostRequest `protobuf:"bytes,1,opt,name=post" json:"post,omitempty"`
	Slug string             `protobuf:"bytes,2,opt,name=slug" json:"slug,omitempty"`
}

func (m *UpdatePostWithSlug) Reset()                    { *m = UpdatePostWithSlug{} }
func (m *UpdatePostWithSlug) String() string            { return proto.CompactTextString(m) }
func (*UpdatePostWithSlug) ProtoMessage()               {}
func (*UpdatePostWithSlug) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdatePostWithSlug) GetPost() *UpdatePostRequest {
	if m != nil {
		return m.Post
	}
	return nil
}

func (m *UpdatePostWithSlug) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

// Comment
type Comment struct {
	Id         uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Content    string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
	Created    string `protobuf:"bytes,3,opt,name=created" json:"created,omitempty"`
	LastEdited string `protobuf:"bytes,4,opt,name=last_edited,json=lastEdited" json:"last_edited,omitempty"`
	UserId     string `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PostId     string `protobuf:"bytes,6,opt,name=post_id,json=postId" json:"post_id,omitempty"`
}

func (m *Comment) Reset()                    { *m = Comment{} }
func (m *Comment) String() string            { return proto.CompactTextString(m) }
func (*Comment) ProtoMessage()               {}
func (*Comment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Comment) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Comment) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Comment) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Comment) GetLastEdited() string {
	if m != nil {
		return m.LastEdited
	}
	return ""
}

func (m *Comment) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Comment) GetPostId() string {
	if m != nil {
		return m.PostId
	}
	return ""
}

// CommentRequest
type CommentRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CommentRequest) Reset()                    { *m = CommentRequest{} }
func (m *CommentRequest) String() string            { return proto.CompactTextString(m) }
func (*CommentRequest) ProtoMessage()               {}
func (*CommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CommentRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// CreateCommentRequest
type CreateCommentRequest struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PostId  uint32 `protobuf:"varint,3,opt,name=post_id,json=postId" json:"post_id,omitempty"`
}

func (m *CreateCommentRequest) Reset()                    { *m = CreateCommentRequest{} }
func (m *CreateCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCommentRequest) ProtoMessage()               {}
func (*CreateCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CreateCommentRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CreateCommentRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CreateCommentRequest) GetPostId() uint32 {
	if m != nil {
		return m.PostId
	}
	return 0
}

// UpdateCommentRequest
type UpdateCommentRequest struct {
	Id      uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *UpdateCommentRequest) Reset()                    { *m = UpdateCommentRequest{} }
func (m *UpdateCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateCommentRequest) ProtoMessage()               {}
func (*UpdateCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateCommentRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateCommentRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// User
type User struct {
	Id         string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Email      string   `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Created    string   `protobuf:"bytes,3,opt,name=created" json:"created,omitempty"`
	LastActive string   `protobuf:"bytes,4,opt,name=last_active,json=lastActive" json:"last_active,omitempty"`
	Role       UserRole `protobuf:"varint,5,opt,name=role,enum=cms.UserRole" json:"role,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *User) GetLastActive() string {
	if m != nil {
		return m.LastActive
	}
	return ""
}

func (m *User) GetRole() UserRole {
	if m != nil {
		return m.Role
	}
	return UserRole_UNKNOWN
}

// UserRequest
type UserRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *UserRequest) Reset()                    { *m = UserRequest{} }
func (m *UserRequest) String() string            { return proto.CompactTextString(m) }
func (*UserRequest) ProtoMessage()               {}
func (*UserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// CreateUserRequest
type CreateUserRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *CreateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// CreateUserWithRole
type CreateUserWithRole struct {
	User *CreateUserRequest `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Role UserRole           `protobuf:"varint,2,opt,name=role,enum=cms.UserRole" json:"role,omitempty"`
}

func (m *CreateUserWithRole) Reset()                    { *m = CreateUserWithRole{} }
func (m *CreateUserWithRole) String() string            { return proto.CompactTextString(m) }
func (*CreateUserWithRole) ProtoMessage()               {}
func (*CreateUserWithRole) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CreateUserWithRole) GetUser() *CreateUserRequest {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CreateUserWithRole) GetRole() UserRole {
	if m != nil {
		return m.Role
	}
	return UserRole_UNKNOWN
}

// AuthUserRequest
type AuthUserRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *AuthUserRequest) Reset()                    { *m = AuthUserRequest{} }
func (m *AuthUserRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthUserRequest) ProtoMessage()               {}
func (*AuthUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AuthUserRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AuthUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// AccessToken
type AccessToken struct {
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken" json:"access_token,omitempty"`
	TokenType   string `protobuf:"bytes,2,opt,name=token_type,json=tokenType" json:"token_type,omitempty"`
	ExpiresIn   uint32 `protobuf:"varint,3,opt,name=expires_in,json=expiresIn" json:"expires_in,omitempty"`
}

func (m *AccessToken) Reset()                    { *m = AccessToken{} }
func (m *AccessToken) String() string            { return proto.CompactTextString(m) }
func (*AccessToken) ProtoMessage()               {}
func (*AccessToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AccessToken) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *AccessToken) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *AccessToken) GetExpiresIn() uint32 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

// StrAndHash
type StrAndHash struct {
	Str  string `protobuf:"bytes,1,opt,name=str" json:"str,omitempty"`
	Hash string `protobuf:"bytes,2,opt,name=hash" json:"hash,omitempty"`
}

func (m *StrAndHash) Reset()                    { *m = StrAndHash{} }
func (m *StrAndHash) String() string            { return proto.CompactTextString(m) }
func (*StrAndHash) ProtoMessage()               {}
func (*StrAndHash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *StrAndHash) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *StrAndHash) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// VerifyNewUserRequest
type VerifyNewUserRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *VerifyNewUserRequest) Reset()                    { *m = VerifyNewUserRequest{} }
func (m *VerifyNewUserRequest) String() string            { return proto.CompactTextString(m) }
func (*VerifyNewUserRequest) ProtoMessage()               {}
func (*VerifyNewUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *VerifyNewUserRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// Email
type Email struct {
	To      string `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	From    string `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	Subject string `protobuf:"bytes,3,opt,name=subject" json:"subject,omitempty"`
	Body    string `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
}

func (m *Email) Reset()                    { *m = Email{} }
func (m *Email) String() string            { return proto.CompactTextString(m) }
func (*Email) ProtoMessage()               {}
func (*Email) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Email) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Email) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Email) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Email) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

// UserPassword
type UserPassword struct {
	Password string `protobuf:"bytes,1,opt,name=password" json:"password,omitempty"`
}

func (m *UserPassword) Reset()                    { *m = UserPassword{} }
func (m *UserPassword) String() string            { return proto.CompactTextString(m) }
func (*UserPassword) ProtoMessage()               {}
func (*UserPassword) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *UserPassword) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*Post)(nil), "cms.Post")
	proto.RegisterType((*PostRequest)(nil), "cms.PostRequest")
	proto.RegisterType((*PostBySlugRequest)(nil), "cms.PostBySlugRequest")
	proto.RegisterType((*CreatePostRequest)(nil), "cms.CreatePostRequest")
	proto.RegisterType((*CreatePostWithSlug)(nil), "cms.CreatePostWithSlug")
	proto.RegisterType((*UpdatePostRequest)(nil), "cms.UpdatePostRequest")
	proto.RegisterType((*UpdatePostWithSlug)(nil), "cms.UpdatePostWithSlug")
	proto.RegisterType((*Comment)(nil), "cms.Comment")
	proto.RegisterType((*CommentRequest)(nil), "cms.CommentRequest")
	proto.RegisterType((*CreateCommentRequest)(nil), "cms.CreateCommentRequest")
	proto.RegisterType((*UpdateCommentRequest)(nil), "cms.UpdateCommentRequest")
	proto.RegisterType((*User)(nil), "cms.User")
	proto.RegisterType((*UserRequest)(nil), "cms.UserRequest")
	proto.RegisterType((*CreateUserRequest)(nil), "cms.CreateUserRequest")
	proto.RegisterType((*CreateUserWithRole)(nil), "cms.CreateUserWithRole")
	proto.RegisterType((*AuthUserRequest)(nil), "cms.AuthUserRequest")
	proto.RegisterType((*AccessToken)(nil), "cms.AccessToken")
	proto.RegisterType((*StrAndHash)(nil), "cms.StrAndHash")
	proto.RegisterType((*VerifyNewUserRequest)(nil), "cms.VerifyNewUserRequest")
	proto.RegisterType((*Email)(nil), "cms.Email")
	proto.RegisterType((*UserPassword)(nil), "cms.UserPassword")
	proto.RegisterEnum("cms.UserRole", UserRole_name, UserRole_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hasher service

type HasherClient interface {
	Hash(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*google_protobuf2.StringValue, error)
	Validate(ctx context.Context, in *StrAndHash, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type hasherClient struct {
	cc *grpc.ClientConn
}

func NewHasherClient(cc *grpc.ClientConn) HasherClient {
	return &hasherClient{cc}
}

func (c *hasherClient) Hash(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*google_protobuf2.StringValue, error) {
	out := new(google_protobuf2.StringValue)
	err := grpc.Invoke(ctx, "/cms.Hasher/Hash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hasherClient) Validate(ctx context.Context, in *StrAndHash, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Hasher/Validate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hasher service

type HasherServer interface {
	Hash(context.Context, *google_protobuf2.StringValue) (*google_protobuf2.StringValue, error)
	Validate(context.Context, *StrAndHash) (*google_protobuf1.Empty, error)
}

func RegisterHasherServer(s *grpc.Server, srv HasherServer) {
	s.RegisterService(&_Hasher_serviceDesc, srv)
}

func _Hasher_Hash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HasherServer).Hash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Hasher/Hash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HasherServer).Hash(ctx, req.(*google_protobuf2.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hasher_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrAndHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HasherServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Hasher/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HasherServer).Validate(ctx, req.(*StrAndHash))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hasher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cms.Hasher",
	HandlerType: (*HasherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hash",
			Handler:    _Hasher_Hash_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Hasher_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cms.proto",
}

// Client API for Emailer service

type EmailerClient interface {
	Send(ctx context.Context, in *Email, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type emailerClient struct {
	cc *grpc.ClientConn
}

func NewEmailerClient(cc *grpc.ClientConn) EmailerClient {
	return &emailerClient{cc}
}

func (c *emailerClient) Send(ctx context.Context, in *Email, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Emailer/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Emailer service

type EmailerServer interface {
	Send(context.Context, *Email) (*google_protobuf1.Empty, error)
}

func RegisterEmailerServer(s *grpc.Server, srv EmailerServer) {
	s.RegisterService(&_Emailer_serviceDesc, srv)
}

func _Emailer_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Email)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailerServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Emailer/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailerServer).Send(ctx, req.(*Email))
	}
	return interceptor(ctx, in, info, handler)
}

var _Emailer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cms.Emailer",
	HandlerType: (*EmailerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Emailer_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cms.proto",
}

// Client API for CmsInternal service

type CmsInternalClient interface {
	// Gets the password of the provided User
	GetUserPassword(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserPassword, error)
	// Updates the LastActive field of the provided User
	UpdateUserLastActive(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Creates the User with the provided Role
	CreateNewUser(ctx context.Context, in *CreateUserWithRole, opts ...grpc.CallOption) (*UserRequest, error)
}

type cmsInternalClient struct {
	cc *grpc.ClientConn
}

func NewCmsInternalClient(cc *grpc.ClientConn) CmsInternalClient {
	return &cmsInternalClient{cc}
}

func (c *cmsInternalClient) GetUserPassword(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserPassword, error) {
	out := new(UserPassword)
	err := grpc.Invoke(ctx, "/cms.CmsInternal/GetUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsInternalClient) UpdateUserLastActive(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.CmsInternal/UpdateUserLastActive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsInternalClient) CreateNewUser(ctx context.Context, in *CreateUserWithRole, opts ...grpc.CallOption) (*UserRequest, error) {
	out := new(UserRequest)
	err := grpc.Invoke(ctx, "/cms.CmsInternal/CreateNewUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CmsInternal service

type CmsInternalServer interface {
	// Gets the password of the provided User
	GetUserPassword(context.Context, *UserRequest) (*UserPassword, error)
	// Updates the LastActive field of the provided User
	UpdateUserLastActive(context.Context, *UserRequest) (*google_protobuf1.Empty, error)
	// Creates the User with the provided Role
	CreateNewUser(context.Context, *CreateUserWithRole) (*UserRequest, error)
}

func RegisterCmsInternalServer(s *grpc.Server, srv CmsInternalServer) {
	s.RegisterService(&_CmsInternal_serviceDesc, srv)
}

func _CmsInternal_GetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsInternalServer).GetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CmsInternal/GetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsInternalServer).GetUserPassword(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsInternal_UpdateUserLastActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsInternalServer).UpdateUserLastActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CmsInternal/UpdateUserLastActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsInternalServer).UpdateUserLastActive(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsInternal_CreateNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserWithRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsInternalServer).CreateNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CmsInternal/CreateNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsInternalServer).CreateNewUser(ctx, req.(*CreateUserWithRole))
	}
	return interceptor(ctx, in, info, handler)
}

var _CmsInternal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cms.CmsInternal",
	HandlerType: (*CmsInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPassword",
			Handler:    _CmsInternal_GetUserPassword_Handler,
		},
		{
			MethodName: "UpdateUserLastActive",
			Handler:    _CmsInternal_UpdateUserLastActive_Handler,
		},
		{
			MethodName: "CreateNewUser",
			Handler:    _CmsInternal_CreateNewUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cms.proto",
}

// Client API for CmsAuth service

type CmsAuthClient interface {
	ActivateNewTokenForUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*AccessToken, error)
	ActivateNewTokenForCreateUserWithRole(ctx context.Context, in *CreateUserWithRole, opts ...grpc.CallOption) (*AccessToken, error)
	DeactivateToken(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
}

type cmsAuthClient struct {
	cc *grpc.ClientConn
}

func NewCmsAuthClient(cc *grpc.ClientConn) CmsAuthClient {
	return &cmsAuthClient{cc}
}

func (c *cmsAuthClient) ActivateNewTokenForUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*AccessToken, error) {
	out := new(AccessToken)
	err := grpc.Invoke(ctx, "/cms.CmsAuth/ActivateNewTokenForUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAuthClient) ActivateNewTokenForCreateUserWithRole(ctx context.Context, in *CreateUserWithRole, opts ...grpc.CallOption) (*AccessToken, error) {
	out := new(AccessToken)
	err := grpc.Invoke(ctx, "/cms.CmsAuth/ActivateNewTokenForCreateUserWithRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsAuthClient) DeactivateToken(ctx context.Context, in *google_protobuf2.StringValue, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.CmsAuth/DeactivateToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CmsAuth service

type CmsAuthServer interface {
	ActivateNewTokenForUser(context.Context, *User) (*AccessToken, error)
	ActivateNewTokenForCreateUserWithRole(context.Context, *CreateUserWithRole) (*AccessToken, error)
	DeactivateToken(context.Context, *google_protobuf2.StringValue) (*google_protobuf1.Empty, error)
}

func RegisterCmsAuthServer(s *grpc.Server, srv CmsAuthServer) {
	s.RegisterService(&_CmsAuth_serviceDesc, srv)
}

func _CmsAuth_ActivateNewTokenForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAuthServer).ActivateNewTokenForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CmsAuth/ActivateNewTokenForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAuthServer).ActivateNewTokenForUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAuth_ActivateNewTokenForCreateUserWithRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserWithRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAuthServer).ActivateNewTokenForCreateUserWithRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CmsAuth/ActivateNewTokenForCreateUserWithRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAuthServer).ActivateNewTokenForCreateUserWithRole(ctx, req.(*CreateUserWithRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmsAuth_DeactivateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsAuthServer).DeactivateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.CmsAuth/DeactivateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsAuthServer).DeactivateToken(ctx, req.(*google_protobuf2.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _CmsAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cms.CmsAuth",
	HandlerType: (*CmsAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActivateNewTokenForUser",
			Handler:    _CmsAuth_ActivateNewTokenForUser_Handler,
		},
		{
			MethodName: "ActivateNewTokenForCreateUserWithRole",
			Handler:    _CmsAuth_ActivateNewTokenForCreateUserWithRole_Handler,
		},
		{
			MethodName: "DeactivateToken",
			Handler:    _CmsAuth_DeactivateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cms.proto",
}

// Client API for Cms service

type CmsClient interface {
	// Setup the application
	Setup(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserRequest, error)
	// Check if application is setup
	IsSetup(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf2.BoolValue, error)
	// Create a post
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*PostRequest, error)
	// Get an unpublished post
	GetUnpublishedPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Post, error)
	// Get an unpublished post (by slug)
	GetUnpublishedPostBySlug(ctx context.Context, in *PostBySlugRequest, opts ...grpc.CallOption) (*Post, error)
	// Get a post
	GetPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Post, error)
	// Get a post (by slug)
	GetPostBySlug(ctx context.Context, in *PostBySlugRequest, opts ...grpc.CallOption) (*Post, error)
	// Update a post
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Delete a post
	DeletePost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get all comments by post
	GetPostComments(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (Cms_GetPostCommentsClient, error)
	// Get all posts
	GetPosts(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (Cms_GetPostsClient, error)
	// Get all unpublished posts
	GetUnpublishedPosts(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (Cms_GetUnpublishedPostsClient, error)
	// Get a user
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error)
	// Delete a user
	DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get all comments by user
	GetUserComments(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (Cms_GetUserCommentsClient, error)
	// Create a comment
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CommentRequest, error)
	// Get a comment
	GetComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*Comment, error)
	// Update a comment
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Delete a comment
	DeleteComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Get all comments
	GetComments(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (Cms_GetCommentsClient, error)
	// Authenticate as an existing user to get an access token
	AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AccessToken, error)
	// Logout deactivates the provided access token
	Logout(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Register for a new user account in order to receive an email with a new user authentication token
	RegisterNewUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error)
	// Verify ownership of your email address in order to finish creating your new user account
	VerifyNewUser(ctx context.Context, in *VerifyNewUserRequest, opts ...grpc.CallOption) (*UserRequest, error)
}

type cmsClient struct {
	cc *grpc.ClientConn
}

func NewCmsClient(cc *grpc.ClientConn) CmsClient {
	return &cmsClient{cc}
}

func (c *cmsClient) Setup(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserRequest, error) {
	out := new(UserRequest)
	err := grpc.Invoke(ctx, "/cms.Cms/Setup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) IsSetup(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*google_protobuf2.BoolValue, error) {
	out := new(google_protobuf2.BoolValue)
	err := grpc.Invoke(ctx, "/cms.Cms/IsSetup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*PostRequest, error) {
	out := new(PostRequest)
	err := grpc.Invoke(ctx, "/cms.Cms/CreatePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetUnpublishedPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := grpc.Invoke(ctx, "/cms.Cms/GetUnpublishedPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetUnpublishedPostBySlug(ctx context.Context, in *PostBySlugRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := grpc.Invoke(ctx, "/cms.Cms/GetUnpublishedPostBySlug", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetPost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := grpc.Invoke(ctx, "/cms.Cms/GetPost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetPostBySlug(ctx context.Context, in *PostBySlugRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := grpc.Invoke(ctx, "/cms.Cms/GetPostBySlug", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Cms/UpdatePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) DeletePost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Cms/DeletePost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetPostComments(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (Cms_GetPostCommentsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cms_serviceDesc.Streams[0], c.cc, "/cms.Cms/GetPostComments", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmsGetPostCommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cms_GetPostCommentsClient interface {
	Recv() (*Comment, error)
	grpc.ClientStream
}

type cmsGetPostCommentsClient struct {
	grpc.ClientStream
}

func (x *cmsGetPostCommentsClient) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cmsClient) GetPosts(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (Cms_GetPostsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cms_serviceDesc.Streams[1], c.cc, "/cms.Cms/GetPosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmsGetPostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cms_GetPostsClient interface {
	Recv() (*Post, error)
	grpc.ClientStream
}

type cmsGetPostsClient struct {
	grpc.ClientStream
}

func (x *cmsGetPostsClient) Recv() (*Post, error) {
	m := new(Post)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cmsClient) GetUnpublishedPosts(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (Cms_GetUnpublishedPostsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cms_serviceDesc.Streams[2], c.cc, "/cms.Cms/GetUnpublishedPosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmsGetUnpublishedPostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cms_GetUnpublishedPostsClient interface {
	Recv() (*Post, error)
	grpc.ClientStream
}

type cmsGetUnpublishedPostsClient struct {
	grpc.ClientStream
}

func (x *cmsGetUnpublishedPostsClient) Recv() (*Post, error) {
	m := new(Post)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cmsClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/cms.Cms/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) DeleteUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Cms/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetUserComments(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (Cms_GetUserCommentsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cms_serviceDesc.Streams[3], c.cc, "/cms.Cms/GetUserComments", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmsGetUserCommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cms_GetUserCommentsClient interface {
	Recv() (*Comment, error)
	grpc.ClientStream
}

type cmsGetUserCommentsClient struct {
	grpc.ClientStream
}

func (x *cmsGetUserCommentsClient) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cmsClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CommentRequest, error) {
	out := new(CommentRequest)
	err := grpc.Invoke(ctx, "/cms.Cms/CreateComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := grpc.Invoke(ctx, "/cms.Cms/GetComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Cms/UpdateComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) DeleteComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Cms/DeleteComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) GetComments(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (Cms_GetCommentsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cms_serviceDesc.Streams[4], c.cc, "/cms.Cms/GetComments", opts...)
	if err != nil {
		return nil, err
	}
	x := &cmsGetCommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cms_GetCommentsClient interface {
	Recv() (*Comment, error)
	grpc.ClientStream
}

type cmsGetCommentsClient struct {
	grpc.ClientStream
}

func (x *cmsGetCommentsClient) Recv() (*Comment, error) {
	m := new(Comment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cmsClient) AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*AccessToken, error) {
	out := new(AccessToken)
	err := grpc.Invoke(ctx, "/cms.Cms/AuthUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) Logout(ctx context.Context, in *AccessToken, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Cms/Logout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) RegisterNewUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*google_protobuf1.Empty, error) {
	out := new(google_protobuf1.Empty)
	err := grpc.Invoke(ctx, "/cms.Cms/RegisterNewUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmsClient) VerifyNewUser(ctx context.Context, in *VerifyNewUserRequest, opts ...grpc.CallOption) (*UserRequest, error) {
	out := new(UserRequest)
	err := grpc.Invoke(ctx, "/cms.Cms/VerifyNewUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cms service

type CmsServer interface {
	// Setup the application
	Setup(context.Context, *CreateUserRequest) (*UserRequest, error)
	// Check if application is setup
	IsSetup(context.Context, *google_protobuf1.Empty) (*google_protobuf2.BoolValue, error)
	// Create a post
	CreatePost(context.Context, *CreatePostRequest) (*PostRequest, error)
	// Get an unpublished post
	GetUnpublishedPost(context.Context, *PostRequest) (*Post, error)
	// Get an unpublished post (by slug)
	GetUnpublishedPostBySlug(context.Context, *PostBySlugRequest) (*Post, error)
	// Get a post
	GetPost(context.Context, *PostRequest) (*Post, error)
	// Get a post (by slug)
	GetPostBySlug(context.Context, *PostBySlugRequest) (*Post, error)
	// Update a post
	UpdatePost(context.Context, *UpdatePostRequest) (*google_protobuf1.Empty, error)
	// Delete a post
	DeletePost(context.Context, *PostRequest) (*google_protobuf1.Empty, error)
	// Get all comments by post
	GetPostComments(*PostRequest, Cms_GetPostCommentsServer) error
	// Get all posts
	GetPosts(*google_protobuf1.Empty, Cms_GetPostsServer) error
	// Get all unpublished posts
	GetUnpublishedPosts(*google_protobuf1.Empty, Cms_GetUnpublishedPostsServer) error
	// Get a user
	GetUser(context.Context, *UserRequest) (*User, error)
	// Delete a user
	DeleteUser(context.Context, *UserRequest) (*google_protobuf1.Empty, error)
	// Get all comments by user
	GetUserComments(*UserRequest, Cms_GetUserCommentsServer) error
	// Create a comment
	CreateComment(context.Context, *CreateCommentRequest) (*CommentRequest, error)
	// Get a comment
	GetComment(context.Context, *CommentRequest) (*Comment, error)
	// Update a comment
	UpdateComment(context.Context, *UpdateCommentRequest) (*google_protobuf1.Empty, error)
	// Delete a comment
	DeleteComment(context.Context, *CommentRequest) (*google_protobuf1.Empty, error)
	// Get all comments
	GetComments(*google_protobuf1.Empty, Cms_GetCommentsServer) error
	// Authenticate as an existing user to get an access token
	AuthUser(context.Context, *AuthUserRequest) (*AccessToken, error)
	// Logout deactivates the provided access token
	Logout(context.Context, *AccessToken) (*google_protobuf1.Empty, error)
	// Register for a new user account in order to receive an email with a new user authentication token
	RegisterNewUser(context.Context, *CreateUserRequest) (*google_protobuf1.Empty, error)
	// Verify ownership of your email address in order to finish creating your new user account
	VerifyNewUser(context.Context, *VerifyNewUserRequest) (*UserRequest, error)
}

func RegisterCmsServer(s *grpc.Server, srv CmsServer) {
	s.RegisterService(&_Cms_serviceDesc, srv)
}

func _Cms_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).Setup(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_IsSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).IsSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/IsSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).IsSetup(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetUnpublishedPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetUnpublishedPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/GetUnpublishedPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetUnpublishedPost(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetUnpublishedPostBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetUnpublishedPostBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/GetUnpublishedPostBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetUnpublishedPostBySlug(ctx, req.(*PostBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetPost(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetPostBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetPostBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/GetPostBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetPostBySlug(ctx, req.(*PostBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).DeletePost(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetPostComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PostRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmsServer).GetPostComments(m, &cmsGetPostCommentsServer{stream})
}

type Cms_GetPostCommentsServer interface {
	Send(*Comment) error
	grpc.ServerStream
}

type cmsGetPostCommentsServer struct {
	grpc.ServerStream
}

func (x *cmsGetPostCommentsServer) Send(m *Comment) error {
	return x.ServerStream.SendMsg(m)
}

func _Cms_GetPosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmsServer).GetPosts(m, &cmsGetPostsServer{stream})
}

type Cms_GetPostsServer interface {
	Send(*Post) error
	grpc.ServerStream
}

type cmsGetPostsServer struct {
	grpc.ServerStream
}

func (x *cmsGetPostsServer) Send(m *Post) error {
	return x.ServerStream.SendMsg(m)
}

func _Cms_GetUnpublishedPosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmsServer).GetUnpublishedPosts(m, &cmsGetUnpublishedPostsServer{stream})
}

type Cms_GetUnpublishedPostsServer interface {
	Send(*Post) error
	grpc.ServerStream
}

type cmsGetUnpublishedPostsServer struct {
	grpc.ServerStream
}

func (x *cmsGetUnpublishedPostsServer) Send(m *Post) error {
	return x.ServerStream.SendMsg(m)
}

func _Cms_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).DeleteUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetUserComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmsServer).GetUserComments(m, &cmsGetUserCommentsServer{stream})
}

type Cms_GetUserCommentsServer interface {
	Send(*Comment) error
	grpc.ServerStream
}

type cmsGetUserCommentsServer struct {
	grpc.ServerStream
}

func (x *cmsGetUserCommentsServer) Send(m *Comment) error {
	return x.ServerStream.SendMsg(m)
}

func _Cms_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/GetComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).GetComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/UpdateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/DeleteComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).DeleteComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_GetComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CmsServer).GetComments(m, &cmsGetCommentsServer{stream})
}

type Cms_GetCommentsServer interface {
	Send(*Comment) error
	grpc.ServerStream
}

type cmsGetCommentsServer struct {
	grpc.ServerStream
}

func (x *cmsGetCommentsServer) Send(m *Comment) error {
	return x.ServerStream.SendMsg(m)
}

func _Cms_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/AuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).AuthUser(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).Logout(ctx, req.(*AccessToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_RegisterNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).RegisterNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/RegisterNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).RegisterNewUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cms_VerifyNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyNewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmsServer).VerifyNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cms.Cms/VerifyNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmsServer).VerifyNewUser(ctx, req.(*VerifyNewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cms_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cms.Cms",
	HandlerType: (*CmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _Cms_Setup_Handler,
		},
		{
			MethodName: "IsSetup",
			Handler:    _Cms_IsSetup_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _Cms_CreatePost_Handler,
		},
		{
			MethodName: "GetUnpublishedPost",
			Handler:    _Cms_GetUnpublishedPost_Handler,
		},
		{
			MethodName: "GetUnpublishedPostBySlug",
			Handler:    _Cms_GetUnpublishedPostBySlug_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _Cms_GetPost_Handler,
		},
		{
			MethodName: "GetPostBySlug",
			Handler:    _Cms_GetPostBySlug_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _Cms_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Cms_DeletePost_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Cms_GetUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Cms_DeleteUser_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _Cms_CreateComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _Cms_GetComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _Cms_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Cms_DeleteComment_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _Cms_AuthUser_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Cms_Logout_Handler,
		},
		{
			MethodName: "RegisterNewUser",
			Handler:    _Cms_RegisterNewUser_Handler,
		},
		{
			MethodName: "VerifyNewUser",
			Handler:    _Cms_VerifyNewUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPostComments",
			Handler:       _Cms_GetPostComments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPosts",
			Handler:       _Cms_GetPosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUnpublishedPosts",
			Handler:       _Cms_GetUnpublishedPosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserComments",
			Handler:       _Cms_GetUserComments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetComments",
			Handler:       _Cms_GetComments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cms.proto",
}

func init() { proto.RegisterFile("cms.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2084 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x5b, 0x6f, 0x1b, 0xc7,
	0x15, 0xd6, 0x52, 0x14, 0x2f, 0x87, 0xa6, 0x25, 0x8d, 0x14, 0x9b, 0x61, 0x1c, 0x73, 0xb3, 0x91,
	0x0b, 0x97, 0x15, 0xb9, 0x14, 0x5d, 0xcb, 0xb2, 0x11, 0x14, 0x25, 0x6d, 0xd7, 0x25, 0xe2, 0x2a,
	0x06, 0x25, 0xd9, 0xb2, 0x05, 0x45, 0x58, 0x91, 0x63, 0x72, 0xe3, 0xe5, 0xce, 0x76, 0x67, 0x18,
	0x89, 0x11, 0x04, 0xa8, 0x05, 0xf2, 0xd0, 0x3e, 0xaa, 0xcd, 0x7b, 0xd1, 0x3f, 0xd2, 0xe7, 0x3e,
	0x16, 0xfd, 0x01, 0x02, 0x84, 0xfc, 0x90, 0x62, 0x66, 0xaf, 0xbc, 0x2c, 0xa5, 0x87, 0x16, 0xe9,
	0x8b, 0xb4, 0x73, 0x3b, 0xe7, 0x7c, 0xdf, 0xf9, 0xe6, 0xcc, 0x0c, 0x21, 0xdd, 0xea, 0xd1, 0xb2,
	0x65, 0x13, 0x46, 0xd0, 0x6c, 0xab, 0x47, 0xf3, 0x77, 0x3a, 0x84, 0x74, 0x0c, 0xac, 0x6a, 0x96,
	0xae, 0x6a, 0xa6, 0x49, 0x98, 0xc6, 0x74, 0x62, 0xba, 0x53, 0xf2, 0x9f, 0xb8, 0xa3, 0xa2, 0x75,
	0xd8, 0x7f, 0xaf, 0xe2, 0x9e, 0xc5, 0x06, 0xee, 0xe0, 0xdd, 0xd1, 0xc1, 0x23, 0x5b, 0xb3, 0x2c,
	0x6c, 0x7b, 0x8b, 0xd7, 0x3b, 0x3a, 0xeb, 0xf6, 0x0f, 0xcb, 0x2d, 0xd2, 0x53, 0x7b, 0x47, 0x3a,
	0xfb, 0x40, 0x8e, 0xd4, 0x0e, 0x29, 0x89, 0xc1, 0xd2, 0xb7, 0x9a, 0xa1, 0xb7, 0x35, 0x46, 0x6c,
	0xaa, 0xfa, 0x9f, 0xee, 0xba, 0x55, 0xf1, 0xaf, 0x55, 0xea, 0x60, 0xb3, 0x44, 0x8f, 0xb4, 0x4e,
	0x07, 0xdb, 0x2a, 0xb1, 0x44, 0x58, 0xe3, 0x21, 0x2a, 0x3f, 0x48, 0x10, 0x7f, 0x45, 0x28, 0x43,
	0x37, 0x21, 0xa6, 0xb7, 0x73, 0x92, 0x2c, 0xdd, 0xcf, 0x36, 0x63, 0x7a, 0x1b, 0x2d, 0xc3, 0x1c,
	0xd3, 0x99, 0x81, 0x73, 0x31, 0x59, 0xba, 0x9f, 0x6e, 0x3a, 0x0d, 0x94, 0x83, 0x64, 0x8b, 0x98,
	0x0c, 0x9b, 0x2c, 0x37, 0x2b, 0xfa, 0xbd, 0xa6, 0x18, 0xb1, 0xb1, 0xc6, 0x70, 0x3b, 0x17, 0x77,
	0x47, 0x9c, 0x26, 0x2a, 0x40, 0xc6, 0xd0, 0x28, 0x3b, 0xc0, 0x6d, 0x9d, 0x8f, 0xce, 0x89, 0x51,
	0xe0, 0x5d, 0xcf, 0x45, 0x0f, 0x42, 0x10, 0xa7, 0x46, 0xbf, 0x93, 0x4b, 0x8a, 0x11, 0xf1, 0xad,
	0xdc, 0x83, 0x0c, 0x0f, 0xab, 0x89, 0x7f, 0xdf, 0xc7, 0x94, 0xa1, 0x5b, 0x41, 0x74, 0xf5, 0xc4,
	0xe5, 0x45, 0x21, 0xb6, 0x30, 0xc3, 0xa3, 0x54, 0xd6, 0x60, 0x91, 0x4f, 0xab, 0x0f, 0xb6, 0x8c,
	0x7e, 0xc7, 0x9b, 0x7c, 0xc7, 0xb5, 0xc7, 0xa7, 0xa7, 0xeb, 0xa9, 0xcb, 0x8b, 0x42, 0x7c, 0x57,
	0x3a, 0xbe, 0xe7, 0x5a, 0xfe, 0x93, 0x04, 0x8b, 0x4f, 0x45, 0x68, 0x61, 0x07, 0x5f, 0x79, 0x70,
	0x9d, 0x45, 0x8f, 0x2f, 0x2f, 0x0a, 0x0f, 0x01, 0xbe, 0x2e, 0x9f, 0x54, 0x56, 0xab, 0x0f, 0xd7,
	0x4f, 0x57, 0x8a, 0x2b, 0x62, 0x58, 0xee, 0xf5, 0x29, 0x93, 0x0f, 0xb1, 0x5c, 0x7d, 0xb8, 0x2e,
	0xb7, 0xba, 0x9a, 0xad, 0xb5, 0x18, 0xb6, 0xa9, 0x4c, 0x6c, 0xd9, 0xc0, 0x94, 0x1e, 0xff, 0x21,
	0xe6, 0x31, 0xf5, 0x79, 0xc0, 0x94, 0x60, 0xb0, 0x9e, 0xbe, 0xbc, 0x28, 0xcc, 0x1d, 0x9f, 0x9d,
	0x9d, 0xa5, 0x7c, 0xd2, 0x94, 0x6d, 0x40, 0x41, 0x28, 0x6f, 0x74, 0xd6, 0xe5, 0x30, 0x50, 0x11,
	0xe2, 0x16, 0xa1, 0x4c, 0x84, 0x92, 0xa9, 0xde, 0x2a, 0x73, 0xcd, 0x8d, 0x45, 0xdc, 0x14, 0x73,
	0x7c, 0xee, 0x62, 0x21, 0xee, 0xfe, 0x21, 0xc1, 0xe2, 0x8e, 0xd5, 0x1e, 0x41, 0x18, 0x41, 0x61,
	0x80, 0x3c, 0xf6, 0xdf, 0x47, 0x3e, 0x1b, 0x85, 0x1c, 0xdd, 0x81, 0xb4, 0xd5, 0x3f, 0x34, 0x74,
	0xda, 0x75, 0x05, 0x93, 0x6a, 0x06, 0x1d, 0x9c, 0x97, 0x00, 0xc0, 0x54, 0x5e, 0xc6, 0x70, 0x4e,
	0xe1, 0xe5, 0x6f, 0x12, 0x24, 0x9f, 0x92, 0x5e, 0x8f, 0xfb, 0x1f, 0x95, 0x7b, 0x6e, 0x24, 0x5d,
	0x13, 0x85, 0x3d, 0x3b, 0x55, 0xd8, 0xf1, 0x31, 0x61, 0xdf, 0x86, 0x64, 0x9f, 0x62, 0xfb, 0x40,
	0xf7, 0x54, 0x9f, 0xe0, 0xcd, 0x86, 0x18, 0xe0, 0x51, 0xf2, 0x81, 0x84, 0x33, 0xc0, 0x9b, 0x8d,
	0xb6, 0x72, 0x1f, 0x6e, 0xba, 0x11, 0x5e, 0xa5, 0xfc, 0x7f, 0x49, 0xb0, 0xec, 0x88, 0x62, 0x64,
	0xc1, 0x4a, 0x80, 0xc4, 0xd1, 0x32, 0x5c, 0x5e, 0x14, 0x12, 0xbb, 0xd2, 0xf1, 0xd9, 0x59, 0x3c,
	0x40, 0x65, 0x07, 0xa1, 0x39, 0x79, 0x7f, 0x7b, 0x79, 0x51, 0xd8, 0x81, 0xa5, 0xaf, 0xf7, 0xf6,
	0x9e, 0x68, 0x86, 0xd5, 0xd5, 0x9e, 0xec, 0xef, 0x9f, 0x3c, 0x58, 0x5d, 0xdb, 0x38, 0x5d, 0x29,
	0x7e, 0xb1, 0x43, 0xb1, 0x2d, 0x37, 0xda, 0xbe, 0x04, 0x1e, 0x94, 0xd6, 0x36, 0xc2, 0x1a, 0xd0,
	0xcc, 0xb6, 0xdc, 0xd2, 0x4c, 0x99, 0x98, 0xc6, 0x40, 0xd6, 0xcd, 0x96, 0xd1, 0x6f, 0x63, 0xd9,
	0xc0, 0x8c, 0x0f, 0xee, 0x4a, 0x3e, 0xea, 0x42, 0x80, 0x7a, 0x76, 0x08, 0x8f, 0x87, 0x7e, 0x1b,
	0x96, 0x9d, 0x7c, 0x5e, 0x8f, 0x83, 0x30, 0xd4, 0x58, 0x24, 0x54, 0xe5, 0xcf, 0x12, 0xc4, 0x39,
	0x82, 0x50, 0xce, 0xd3, 0x5e, 0x89, 0xc3, 0x3d, 0x4d, 0x37, 0xbc, 0x12, 0x27, 0x1a, 0xd7, 0xc8,
	0xb7, 0xd6, 0x62, 0xfa, 0xb7, 0x38, 0x9c, 0xef, 0x9a, 0xe8, 0x41, 0x9f, 0x41, 0xdc, 0x26, 0x06,
	0x16, 0xc9, 0xbe, 0x59, 0xcd, 0x3a, 0x02, 0xa5, 0xd8, 0x6e, 0x12, 0x03, 0x37, 0xc5, 0x90, 0x72,
	0x0c, 0x19, 0xd1, 0xe3, 0x22, 0xd3, 0x83, 0x90, 0xfe, 0x97, 0x19, 0xe0, 0x82, 0xf9, 0x7e, 0xd6,
	0xab, 0x7b, 0x3f, 0x4d, 0x00, 0xa8, 0x37, 0x44, 0x77, 0xfd, 0xcd, 0xe5, 0x45, 0x61, 0x0b, 0x1e,
	0x39, 0xde, 0xcc, 0x7e, 0xef, 0xc9, 0xfe, 0xfe, 0x5e, 0xe9, 0xa0, 0xac, 0x95, 0xbe, 0xab, 0x95,
	0xde, 0x55, 0x4a, 0x8f, 0xf7, 0x4f, 0x2a, 0xab, 0xeb, 0x0f, 0x4e, 0x7f, 0x3d, 0xd2, 0xb9, 0xb6,
	0xba, 0xf6, 0xb8, 0x72, 0xba, 0x52, 0x5c, 0x7a, 0xce, 0x6d, 0xf9, 0xf1, 0x88, 0x53, 0x90, 0x67,
	0x3e, 0xe6, 0xe5, 0xf1, 0x07, 0x09, 0x52, 0x96, 0x46, 0xe9, 0x11, 0xb1, 0xdd, 0x4c, 0xd6, 0x07,
	0x97, 0x17, 0x85, 0xbe, 0x03, 0xb0, 0x63, 0x6b, 0x56, 0x97, 0x03, 0x5c, 0x5f, 0x7d, 0xc8, 0xcd,
	0xbd, 0x7b, 0xe5, 0x4e, 0xf5, 0x2d, 0x6a, 0x4c, 0x36, 0xb0, 0x46, 0x99, 0xbc, 0x2e, 0x5b, 0xb6,
	0x6e, 0x32, 0xed, 0xd0, 0xc0, 0x61, 0xc4, 0x47, 0x3a, 0xeb, 0x92, 0x3e, 0x93, 0x8f, 0xba, 0x3a,
	0xc3, 0xd4, 0xd2, 0x5a, 0x58, 0x14, 0x43, 0xae, 0x3a, 0x9b, 0x18, 0xa1, 0x99, 0xbb, 0xd2, 0xf1,
	0x83, 0xa6, 0x1f, 0x8a, 0xd2, 0xf2, 0x6a, 0x3e, 0xa7, 0x94, 0xd7, 0x36, 0xae, 0x0e, 0x5e, 0xdb,
	0xf8, 0x2e, 0x99, 0x50, 0xf3, 0x43, 0xd9, 0x6a, 0x8a, 0x39, 0xbe, 0xcc, 0x62, 0xd1, 0x32, 0xfb,
	0x6b, 0x0c, 0xe6, 0x6b, 0x7d, 0xd6, 0xfd, 0x89, 0x52, 0x3d, 0xc4, 0x7d, 0xec, 0xff, 0x87, 0x7b,
	0x13, 0x32, 0xb5, 0x56, 0x0b, 0x53, 0xba, 0x4d, 0x3e, 0x60, 0x13, 0x7d, 0x06, 0x37, 0x34, 0xd1,
	0x3c, 0x60, 0xbc, 0xed, 0x96, 0x86, 0x8c, 0x16, 0x9a, 0xf2, 0x29, 0x80, 0x18, 0x3b, 0x60, 0x03,
	0xcb, 0xbb, 0x0b, 0xa5, 0x45, 0xcf, 0xf6, 0xc0, 0xc2, 0x7c, 0x18, 0x1f, 0x5b, 0xba, 0x8d, 0xe9,
	0x81, 0x6e, 0x3a, 0x55, 0xad, 0x99, 0x76, 0x7b, 0x1a, 0xa6, 0x52, 0x05, 0xd8, 0x62, 0x76, 0xcd,
	0x6c, 0xff, 0x56, 0xa3, 0x5d, 0xb4, 0x00, 0xb3, 0x94, 0xd9, 0xae, 0x17, 0xfe, 0xc9, 0x4f, 0xa9,
	0xae, 0x46, 0xbb, 0xde, 0x29, 0xc5, 0xbf, 0xf9, 0x8d, 0x6c, 0xf9, 0x35, 0xb6, 0xf5, 0xf7, 0x83,
	0x4d, 0x7c, 0x14, 0xce, 0xdf, 0x29, 0xcc, 0x85, 0xc2, 0xac, 0x77, 0x2e, 0x2f, 0x0a, 0x2d, 0x58,
	0xe4, 0x84, 0x1e, 0xb7, 0xf5, 0x8e, 0xce, 0x04, 0xa3, 0xa7, 0x2b, 0xc5, 0x97, 0x5b, 0xc4, 0xb6,
	0x07, 0xab, 0x32, 0xeb, 0x6a, 0x4c, 0x16, 0x2b, 0xe4, 0x36, 0xc1, 0x54, 0x36, 0x09, 0x93, 0xf9,
	0x0d, 0x53, 0xb3, 0x9d, 0xdd, 0x52, 0x96, 0x5f, 0x71, 0x92, 0xb1, 0xcc, 0xec, 0x81, 0x8c, 0x4d,
	0x86, 0x6d, 0xdd, 0xec, 0xc8, 0xac, 0x8b, 0xdd, 0x45, 0x5a, 0x47, 0xd3, 0xcd, 0x5d, 0xa9, 0xe9,
	0x78, 0x55, 0xde, 0xc2, 0x9c, 0xd8, 0x72, 0xbc, 0x8c, 0x32, 0xe2, 0x95, 0x51, 0x46, 0x38, 0x88,
	0xf7, 0x36, 0xe9, 0x79, 0x20, 0xf8, 0x37, 0x2f, 0xa2, 0xb4, 0x7f, 0xf8, 0x0d, 0x6e, 0xf9, 0xf7,
	0x44, 0xb7, 0xc9, 0x67, 0x1f, 0x92, 0xf6, 0xc0, 0xad, 0x9e, 0xe2, 0x5b, 0x29, 0xc2, 0x0d, 0x0e,
	0xd4, 0x93, 0x01, 0xca, 0x87, 0xd4, 0xe3, 0xf8, 0xf1, 0xdb, 0xc5, 0x55, 0x48, 0x79, 0x5a, 0x47,
	0x19, 0x48, 0xee, 0x6c, 0x7e, 0xb9, 0xf9, 0xd5, 0x9b, 0xcd, 0x85, 0x19, 0x94, 0x86, 0xb9, 0xda,
	0xb3, 0xdf, 0x35, 0x36, 0x17, 0x24, 0x94, 0x82, 0xf8, 0xce, 0xd6, 0xf3, 0xe6, 0x42, 0xac, 0xfa,
	0xbd, 0x04, 0x09, 0xce, 0x3d, 0xb6, 0xd1, 0x33, 0x88, 0x8b, 0x2c, 0xdc, 0x29, 0x3b, 0x17, 0xef,
	0xb2, 0x77, 0xf1, 0x2e, 0x6f, 0x31, 0x8e, 0xfc, 0xb5, 0x66, 0xf4, 0x71, 0x7e, 0xea, 0xa8, 0x32,
	0x83, 0x1e, 0x42, 0xea, 0xb5, 0x73, 0xe1, 0xc6, 0x68, 0x5e, 0xec, 0xbc, 0x20, 0xc1, 0xf9, 0x5b,
	0x63, 0x8b, 0x9f, 0xf3, 0x0b, 0xbf, 0x32, 0x53, 0x7d, 0x04, 0x49, 0x41, 0x1e, 0xb6, 0xd1, 0x2a,
	0xc4, 0xb7, 0xb0, 0xd9, 0x46, 0x20, 0x56, 0x8b, 0xde, 0x29, 0x0b, 0xff, 0x29, 0x41, 0xe6, 0x69,
	0x8f, 0x36, 0x78, 0x7a, 0x4c, 0xcd, 0x40, 0x1b, 0x30, 0xff, 0x02, 0xb3, 0x21, 0xb6, 0x16, 0x82,
	0x02, 0xe0, 0x28, 0x25, 0xbf, 0xe8, 0xf7, 0x78, 0x93, 0x94, 0x19, 0x54, 0xf7, 0x0e, 0x57, 0xde,
	0xff, 0x32, 0x38, 0xb4, 0xc6, 0x97, 0x47, 0x46, 0x83, 0xbe, 0x80, 0xac, 0x53, 0x94, 0x5c, 0x69,
	0xa2, 0xdb, 0x23, 0x85, 0xca, 0xab, 0x67, 0xf9, 0x31, 0xab, 0xca, 0x4c, 0xf5, 0x47, 0x7e, 0xff,
	0xea, 0x51, 0x5e, 0x97, 0xd0, 0x06, 0xdc, 0x16, 0xfe, 0x1d, 0x5b, 0x62, 0xaf, 0xfd, 0x86, 0xd8,
	0xc2, 0x66, 0xda, 0x5f, 0xea, 0x5a, 0x09, 0x6d, 0x59, 0x65, 0x06, 0x6d, 0xc3, 0xbd, 0x09, 0x2b,
	0x27, 0x94, 0xd4, 0x2b, 0x62, 0x1b, 0xb6, 0xda, 0x80, 0xf9, 0x67, 0x58, 0x73, 0xed, 0x3a, 0x5b,
	0x7f, 0xba, 0x50, 0xa2, 0x53, 0xf6, 0x77, 0x04, 0xb3, 0x4f, 0x7b, 0x14, 0x6d, 0xc2, 0xdc, 0x16,
	0x66, 0x7d, 0x0b, 0x45, 0x54, 0xf3, 0x09, 0x1c, 0x7d, 0x72, 0x5e, 0x4b, 0xba, 0xab, 0xfe, 0xf8,
	0xef, 0x1f, 0xff, 0x12, 0xcb, 0x28, 0x09, 0x95, 0xf2, 0xd6, 0x13, 0xa9, 0x88, 0xde, 0x41, 0xb2,
	0x41, 0x3d, 0x8b, 0x13, 0x9d, 0xe7, 0xf3, 0x63, 0xfd, 0x75, 0x42, 0x0c, 0x47, 0xbb, 0x63, 0xb6,
	0x51, 0x5a, 0xd5, 0x69, 0x49, 0x98, 0x47, 0x1a, 0x40, 0xf0, 0xc2, 0x40, 0x11, 0x4f, 0x0e, 0x37,
	0xe0, 0x50, 0x8f, 0xf2, 0xf3, 0xf3, 0xda, 0x47, 0x30, 0xc7, 0x7b, 0xe8, 0xe1, 0x0d, 0x00, 0x48,
	0xd4, 0x5e, 0x35, 0xbe, 0xc4, 0x03, 0x34, 0xe3, 0x87, 0xcf, 0xaf, 0x76, 0x94, 0x87, 0xff, 0x0d,
	0x20, 0xae, 0x5c, 0xd3, 0xbf, 0xe5, 0x0b, 0x57, 0x63, 0x26, 0xf3, 0x69, 0xbf, 0x47, 0x79, 0x34,
	0xd5, 0xfa, 0xc7, 0xe8, 0xb6, 0xda, 0x0f, 0xcc, 0x95, 0x84, 0x27, 0xf5, 0x44, 0x6f, 0x9f, 0xa2,
	0x53, 0xc8, 0x8d, 0xfb, 0x72, 0x1e, 0x89, 0x2e, 0xb8, 0xb1, 0x57, 0x63, 0xd8, 0xef, 0xaf, 0xa6,
	0xfa, 0x95, 0xd1, 0xdd, 0x09, 0x7e, 0xf9, 0x0b, 0x43, 0x3d, 0xe1, 0x7f, 0x4f, 0xd1, 0x73, 0x48,
	0xbe, 0xc0, 0xec, 0x6a, 0x7c, 0x9f, 0x8a, 0x94, 0x08, 0x3f, 0xc2, 0x72, 0x16, 0x65, 0xd4, 0x10,
	0x8a, 0x5d, 0xc8, 0xba, 0x66, 0xae, 0x1f, 0xfa, 0xca, 0x88, 0xc9, 0x65, 0x84, 0xd4, 0xf1, 0x00,
	0x0d, 0x80, 0xe0, 0xe1, 0x84, 0x22, 0x5e, 0x52, 0x91, 0x12, 0x2f, 0x4f, 0xa5, 0x67, 0x21, 0x1f,
	0x06, 0xc1, 0x33, 0xdf, 0x02, 0x78, 0x86, 0x0d, 0xec, 0x7a, 0x1b, 0x67, 0x24, 0xca, 0xcf, 0x2f,
	0xa6, 0xfa, 0xc9, 0x16, 0x87, 0xc8, 0xda, 0x13, 0x85, 0x91, 0x4f, 0x76, 0x1f, 0x0f, 0x74, 0x82,
	0xa7, 0x1b, 0x8e, 0xb0, 0x9d, 0x09, 0xca, 0xcf, 0x46, 0xb8, 0xba, 0x85, 0x96, 0x43, 0x16, 0xd5,
	0x96, 0x6b, 0xa7, 0x22, 0xa1, 0x06, 0xa4, 0x5c, 0xe3, 0x34, 0x72, 0xef, 0x85, 0x92, 0x90, 0x1b,
	0x31, 0x9c, 0x42, 0xee, 0x3e, 0xa8, 0x48, 0xc8, 0x84, 0xa5, 0x71, 0x69, 0x5e, 0xcb, 0x6a, 0x75,
	0x2a, 0x1d, 0x3c, 0xd1, 0x63, 0xaa, 0xac, 0x48, 0xae, 0x16, 0x45, 0x61, 0x1d, 0xaf, 0xf4, 0x41,
	0xa9, 0x75, 0xb5, 0xc8, 0x3f, 0x03, 0x2d, 0xf2, 0xdb, 0xa6, 0x4b, 0xaf, 0x9f, 0xc3, 0x08, 0x4b,
	0xd3, 0x73, 0x28, 0xcc, 0x46, 0xe4, 0x30, 0xe4, 0x64, 0xcf, 0x3f, 0xdc, 0x46, 0x72, 0x18, 0xf6,
	0x34, 0x29, 0x87, 0x41, 0xd8, 0x3c, 0x87, 0x81, 0xc5, 0x70, 0x0e, 0x2d, 0xef, 0xec, 0xf2, 0x7e,
	0x02, 0xf8, 0x38, 0x54, 0xe5, 0x86, 0x1f, 0x9c, 0xf9, 0xa5, 0xb0, 0x0f, 0xaf, 0xd6, 0xa9, 0xe7,
	0xb5, 0x1c, 0xa4, 0xbc, 0xc8, 0x26, 0xa0, 0xb9, 0xa9, 0xa4, 0x7d, 0x87, 0x5c, 0xf7, 0xdb, 0x00,
	0x2f, 0xb0, 0x27, 0x47, 0x34, 0xc9, 0xe6, 0x08, 0x98, 0xcf, 0xcf, 0x6b, 0x10, 0x78, 0x70, 0x76,
	0x13, 0xba, 0xe9, 0xdb, 0x74, 0x48, 0x3a, 0x86, 0xec, 0xd0, 0x23, 0xd9, 0xc5, 0x31, 0xe9, 0xe1,
	0x1c, 0x99, 0x95, 0x5f, 0x5e, 0x05, 0x65, 0x29, 0x3f, 0xe2, 0x96, 0xe3, 0x21, 0x90, 0x75, 0x34,
	0x30, 0x15, 0x52, 0x94, 0xcf, 0xb5, 0xab, 0x7c, 0x2e, 0x14, 0x47, 0xa1, 0xee, 0x40, 0x26, 0x20,
	0x30, 0x7a, 0x8f, 0x0c, 0x93, 0x78, 0x77, 0x9c, 0x44, 0x7e, 0xd4, 0x85, 0x94, 0xd0, 0x84, 0x94,
	0xf7, 0x36, 0x42, 0xcb, 0xce, 0x5d, 0x60, 0xf8, 0xa9, 0x34, 0xe1, 0x86, 0x70, 0xf7, 0xbc, 0x96,
	0x80, 0x38, 0x9f, 0x27, 0x2c, 0xce, 0x2b, 0xa0, 0x6a, 0x7d, 0xd6, 0x15, 0x5a, 0xe3, 0xdc, 0xbc,
	0x85, 0xc4, 0x4b, 0xd2, 0x21, 0x7d, 0xaf, 0xbe, 0x85, 0xd6, 0x46, 0x32, 0x72, 0x6f, 0xd8, 0xe6,
	0x2d, 0x65, 0x31, 0xb0, 0xa9, 0x1a, 0xc2, 0x1a, 0x37, 0xfd, 0x01, 0xe6, 0x9b, 0xb8, 0xa3, 0x53,
	0x86, 0x6d, 0xef, 0xda, 0x15, 0x75, 0xa3, 0x88, 0xf2, 0x74, 0x5f, 0x70, 0xe2, 0x59, 0x11, 0xde,
	0x3e, 0x52, 0x16, 0x54, 0xdb, 0xed, 0x70, 0x3c, 0x56, 0xb8, 0xb3, 0xf7, 0x90, 0x1d, 0x7a, 0x7c,
	0xb8, 0xea, 0x9a, 0xf4, 0x20, 0x99, 0x70, 0x7f, 0xb9, 0x96, 0x9f, 0xb5, 0x27, 0x52, 0xb1, 0xbe,
	0x7b, 0x5e, 0xdb, 0x41, 0xc9, 0xea, 0xdc, 0x5a, 0xb9, 0x52, 0xae, 0xe4, 0xf9, 0x6b, 0xcf, 0x36,
	0x71, 0xbb, 0x44, 0x19, 0x31, 0x71, 0x69, 0x6d, 0xe3, 0xf1, 0x46, 0xa5, 0x5a, 0xd6, 0x2c, 0x8b,
	0x5a, 0x84, 0x95, 0x5b, 0xa4, 0xa7, 0xc4, 0x55, 0xcd, 0xd2, 0x8b, 0x52, 0xec, 0x5d, 0x01, 0x3e,
	0xf5, 0x75, 0xb3, 0x94, 0x8a, 0xe5, 0xb3, 0x9c, 0x3f, 0x62, 0xeb, 0xdf, 0x89, 0x9f, 0xb5, 0xe5,
	0xd8, 0x61, 0x42, 0x60, 0x7f, 0xf0, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x52, 0x9c, 0x6e,
	0xab, 0x17, 0x00, 0x00,
}
