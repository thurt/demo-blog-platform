syntax = "proto3";

// CMS
//
// CMS Service API provides access to CMS entities and supports CMS use-cases
package cms;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// Post
message Post {
    uint32 id = 1;
    string title = 2;
    string content = 3;
    string created = 4;
    string last_edited = 5;
    string published = 6;
    string slug = 7;
}

// PostRequest
message PostRequest {
    uint32 id = 1 [(validator.field) = {int_gt: 0}];
}

// GetPostsOptions
message GetPostsOptions {
    // when true, includes unpublished Posts in response (note: Authorization token with ADMIN role is required)
    bool includeUnPublished = 2;
}

// CreatePostRequest
message CreatePostRequest {
    string title = 1 [(validator.field) = {length_lt: 256, regex: "^.{0,256}$"}]; 
    string content = 2 [(validator.field) = {length_lt: 16777216}];
}

// CreatePostWithSlug
message CreatePostWithSlug {
    CreatePostRequest post = 1;
    string slug = 2;
}

// UpdatePostRequest
message UpdatePostRequest {
    uint32 id = 1 [(validator.field) = {int_gt: 0}];
    string title = 2 [(validator.field) = {length_lt: 256, regex: "^.{0,256}$"}]; 
    string content = 3 [(validator.field) = {length_lt: 16777216}];
}

// UpdatePostWithSlug
message UpdatePostWithSlug {
    UpdatePostRequest post = 1;
    string slug = 2;
}

// Comment
message Comment {
    uint32 id = 1;
    string content = 2;
    string created = 3;
    string last_edited = 4;
    string user_id = 5;
    string post_id = 6;
}

// CommentRequest
message CommentRequest {
    uint32 id = 1 [(validator.field) = {int_gt: 0}];
}

// CreateCommentRequest
message CreateCommentRequest {
    string content = 1 [(validator.field) = {string_not_empty: true, length_lt: 65536}];
    string user_id = 2 [(validator.field) = {string_not_empty: true, regex: "^[[:alpha:]]{3,18}$", human_error: "User Id must be 3-18 characters and can only include letters"}];
    uint32 post_id = 3 [(validator.field) = {int_gt: 0}];
}

// UpdateCommentRequest
message UpdateCommentRequest {
    uint32 id = 1 [(validator.field) = {int_gt: 0}];
    string content = 2 [(validator.field) = {string_not_empty: true, length_lt: 65536}]; 
}

// UserRole
enum UserRole {
    UNKNOWN = 0;
    ADMIN = 1;
    USER = 2;
}

// User
message User {
    string id = 1;
    string email = 2;
    string created = 3;
    string last_active = 4;
    UserRole role = 5;
}

// UserRequest
message UserRequest {
    string id = 1 [(validator.field) = {string_not_empty: true, regex: "^[[:alpha:]]{3,18}$", human_error: "User Id must be 3-18 characters and can only include letters"}];
}

// CreateUserRequest
message CreateUserRequest {
    string id = 1 [(validator.field) = {string_not_empty: true, regex: "^[[:alpha:]]{3,18}$", human_error: "User Id must be 3-18 characters and can only include letters"}];
    string email = 2 [(validator.field) = {string_not_empty: true, length_lt:256, regex: "^[[:alnum:]][-_.a-zA-Z0-9]{0,63}@[-_.a-zA-Z0-9]{1,190}$", human_error: "Email must be valid"}];
    string password = 3 [(validator.field) = {string_not_empty: true, length_lt:51, regex: "^[[:graph:]]{6,50}$", human_error: "Password must be at least 6 printable characters without whitespaces or control characters"}];
}

// CreateUserWithRole
message CreateUserWithRole {
    CreateUserRequest user = 1;
    UserRole role = 2;
}

// AuthUserRequest
message AuthUserRequest {
    string id = 1 [(validator.field) = {string_not_empty: true, regex: "^[[:alpha:]]{3,18}$", human_error: "User Id must be 3-18 characters and can only include letters"}];
    string password = 2 [(validator.field) = {string_not_empty: true, length_lt:51, regex: "^[[:graph:]]{6,50}$", human_error: "Password must be at least 6 printable characters without whitespaces or control characters"}];
}

// AccessToken
message AccessToken {
    string access_token = 1;
    string token_type = 2;
    uint32 expires_in = 3;
}

// UserPassword
message UserPassword {
    string password = 1; 
}
        
service CmsInternal {
    rpc GetUserPassword(UserRequest) returns (UserPassword) {}
}

service CmsAuth {
    rpc ActivateNewTokenForUser(User) returns (AccessToken) {}
}

service Cms {
    // Setup the application
    rpc Setup(CreateUserRequest) returns (UserRequest) {
        option (google.api.http) = {
            post: "/setup"
            body: "*"
        };
    }
    // Check if application is setup
    rpc IsSetup(google.protobuf.Empty) returns (google.protobuf.BoolValue) {
        option (google.api.http) = {
            get: "/is-setup"
        };
    }

    // Create a post
    rpc CreatePost(CreatePostRequest) returns (PostRequest) {
        option (google.api.http) = {
            post: "/posts"
            body: "*"
        };
    }
    // Get a post
   rpc GetPost(PostRequest) returns (Post) {
        option (google.api.http) = {
            get: "/posts/{id}"
        };
    }
    // Update a post
    rpc UpdatePost(UpdatePostRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/posts/{id}"
            body: "*"
        };
    }
    // Delete a post
    rpc DeletePost(PostRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/posts/{id}"
        };
    }
    // Get all comments by post
    rpc GetPostComments(PostRequest) returns (stream Comment) {
        option (google.api.http) = {
            get: "/posts/{id}/comments"
        };
    }
    // Get all posts
    rpc GetPosts(GetPostsOptions) returns (stream Post) {
         option (google.api.http) = {
            get: "/posts"
        };
    }
    // Publish a post
    rpc PublishPost(PostRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/posts/{id}"
        };
    }
    // UnPublish a post
    rpc UnPublishPost(PostRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/posts/{id}"
        };
    }
    
    // Create a user
    rpc CreateUser(CreateUserRequest) returns (UserRequest) {
         option (google.api.http) = {
            post: "/users"
            body: "*"
        };
    }

    // Get a user
    rpc GetUser(UserRequest) returns (User) {
        option (google.api.http) = {
            get: "/users/{id}"
        };
    }

    // Delete a user
    rpc DeleteUser(UserRequest) returns (google.protobuf.Empty) {
         option (google.api.http) = {
            delete: "/users/{id}"
        };
    }
    
    // Get all comments by user
    rpc GetUserComments(UserRequest) returns (stream Comment) {
         option (google.api.http) = {
            get: "/users/{id}/comments"
        };
    }

    // Create a comment
    rpc CreateComment(CreateCommentRequest) returns (CommentRequest) {
         option (google.api.http) = {
            post: "/comments"
            body: "*"
        };
    }
    // Get a comment
    rpc GetComment(CommentRequest) returns (Comment) {
         option (google.api.http) = {
            get: "/comments/{id}"
        };
    }
    // Update a comment
    rpc UpdateComment(UpdateCommentRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/comments/{id}"
            body: "*"
        };
    }
    // Delete a comment
    rpc DeleteComment(CommentRequest) returns (google.protobuf.Empty) {
         option (google.api.http) = {
            delete: "/comments/{id}"
        };
    }
    // Get all comments
    rpc GetComments(google.protobuf.Empty) returns (stream Comment) {
         option (google.api.http) = {
            get: "/comments"
        };
    }

    // Authorize as a user to get an access token
    rpc AuthUser(AuthUserRequest) returns (AccessToken) {
        option (google.api.http) = {
            post: "/auth/user",
            body: "*"
        };
    }
}

