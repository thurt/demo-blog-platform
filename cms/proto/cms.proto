syntax = "proto3";

// CMS
//
// CMS Service API provides access to CMS entities and supports CMS use-cases
package cms;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// Posts
    message Post {
        uint32 id = 1;
        string title = 2;
        string content = 3;
        string created = 4;
        string last_edited = 5;
        string published = 6;
        string slug = 7;
    }

    message PostRequest {
        uint32 id = 1 [(validator.field) = {int_gt: 0}];
    }

    message CreatePostRequest {
        string title = 1; 
        string content = 2; 
    }

    message UpdatePostRequest {
        uint32 id = 1 [(validator.field) = {int_gt: 0}];
        string title = 2; 
        string content = 3; 
    }

// Comments
    message Comment {
        uint32 id = 1;
        string content = 2;
        string created = 3;
        string last_edited = 4;
        string user_id = 5;
        string post_id = 6;
    }

    message CommentRequest {
        uint32 id = 1 [(validator.field) = {int_gt: 0}];
    }

    message CreateCommentRequest {
        string content = 1 [(validator.field) = {string_not_empty: true}];
        string user_id = 2 [(validator.field) = {string_not_empty: true}];
        string post_id = 3 [(validator.field) = {string_not_empty: true}];
    }

    message UpdateCommentRequest {
        uint32 id = 1 [(validator.field) = {int_gt: 0}];
        string content = 2 [(validator.field) = {string_not_empty: true}]; 
    }

// Users
    message User {
        string id = 1;
        string email = 2;
        string created = 3;
        string last_active = 4;
    }

    message UserRequest {
        string id = 1 [(validator.field) = {string_not_empty: true, regex: "^[a-zA-Z]{3,}$", human_error: "User Id must be at least 3 characters and can only include letters"}];
    }

    message CreateUserRequest {
        string id = 1 [(validator.field) = {string_not_empty: true, regex: "^[a-zA-Z]{3,}$", human_error: "User Id must be at least 3 characters and can only include letters"}];
        string email = 2 [(validator.field) = {string_not_empty: true}];
        string password = 3 [(validator.field) = {string_not_empty: true}];
    }

service Cms {
// Post CRUD
    rpc CreatePost(CreatePostRequest) returns (PostRequest) {
        option (google.api.http) = {
            post: "/posts"
            body: "*"
        };
    }
   rpc GetPost(PostRequest) returns (Post) {
        option (google.api.http) = {
            get: "/posts/{id}"
        };
    }
    rpc UpdatePost(UpdatePostRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/posts/{id}"
            body: "*"
        };
    }
    rpc DeletePost(PostRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/posts/{id}"
        };
    }
    // Post Use-Cases
    rpc GetPostComments(PostRequest) returns (stream Comment) {
        option (google.api.http) = {
            get: "/posts/{id}/comments"
        };
    }
    rpc GetPosts(google.protobuf.Empty) returns (stream Post) {
         option (google.api.http) = {
            get: "/posts"
        };
    }
    rpc PublishPost(PostRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/posts/{id}"
        };
    }
    rpc UnPublishPost(PostRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/posts/{id}"
        };
    }
    

// User CRD
    rpc CreateUser(CreateUserRequest) returns (UserRequest) {
         option (google.api.http) = {
            post: "/users"
            body: "*"
        };
    }
    rpc GetUser(UserRequest) returns (User) {
        option (google.api.http) = {
            get: "/users/{id}"
        };
    }
    rpc DeleteUser(UserRequest) returns (google.protobuf.Empty) {
         option (google.api.http) = {
            delete: "/users/{id}"
        };
    }
    
// User Use-Cases
    rpc GetUserComments(UserRequest) returns (stream Comment) {
         option (google.api.http) = {
            get: "/users/{id}/comments"
        };
    }

// Comment CRUD
    rpc CreateComment(CreateCommentRequest) returns (CommentRequest) {
         option (google.api.http) = {
            post: "/comments"
            body: "*"
        };
    }
    rpc GetComment(CommentRequest) returns (Comment) {
         option (google.api.http) = {
            get: "/comments/{id}"
        };
    }
    rpc UpdateComment(UpdateCommentRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/comments/{id}"
            body: "*"
        };
    }
    rpc DeleteComment(CommentRequest) returns (google.protobuf.Empty) {
         option (google.api.http) = {
            delete: "/comments/{id}"
        };
    }
// Comment Use-Cases
    rpc GetComments(google.protobuf.Empty) returns (stream Comment) {
         option (google.api.http) = {
            get: "/comments"
        };
    }
}

