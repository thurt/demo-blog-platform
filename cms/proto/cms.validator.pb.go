// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cms.proto

/*
Package cms is a generated protocol buffer package.

CMS

CMS Service API provides access to CMS entities and supports CMS use-cases

It is generated from these files:
	cms.proto

It has these top-level messages:
	Post
	PostRequest
	CreatePostRequest
	UpdatePostRequest
	Comment
	CommentRequest
	CreateCommentRequest
	UpdateCommentRequest
	User
	UserRequest
	CreateUserRequest
*/
package cms

import regexp "regexp"
import fmt "fmt"
import go_proto_validators "github.com/mwitkow/go-proto-validators"
import proto "github.com/golang/protobuf/proto"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *Post) Validate() error {
	return nil
}
func (this *PostRequest) Validate() error {
	if !(this.Id > 0) {
		return go_proto_validators.FieldError("Id", fmt.Errorf(`value '%v' must be greater than '0'`, this.Id))
	}
	return nil
}
func (this *CreatePostRequest) Validate() error {
	return nil
}
func (this *UpdatePostRequest) Validate() error {
	if !(this.Id > 0) {
		return go_proto_validators.FieldError("Id", fmt.Errorf(`value '%v' must be greater than '0'`, this.Id))
	}
	return nil
}
func (this *Comment) Validate() error {
	return nil
}
func (this *CommentRequest) Validate() error {
	if !(this.Id > 0) {
		return go_proto_validators.FieldError("Id", fmt.Errorf(`value '%v' must be greater than '0'`, this.Id))
	}
	return nil
}
func (this *CreateCommentRequest) Validate() error {
	if this.Content == "" {
		return go_proto_validators.FieldError("Content", fmt.Errorf(`value '%v' must not be an empty string`, this.Content))
	}
	if this.UserId == "" {
		return go_proto_validators.FieldError("UserId", fmt.Errorf(`value '%v' must not be an empty string`, this.UserId))
	}
	if this.PostId == "" {
		return go_proto_validators.FieldError("PostId", fmt.Errorf(`value '%v' must not be an empty string`, this.PostId))
	}
	return nil
}
func (this *UpdateCommentRequest) Validate() error {
	if !(this.Id > 0) {
		return go_proto_validators.FieldError("Id", fmt.Errorf(`value '%v' must be greater than '0'`, this.Id))
	}
	if this.Content == "" {
		return go_proto_validators.FieldError("Content", fmt.Errorf(`value '%v' must not be an empty string`, this.Content))
	}
	return nil
}
func (this *User) Validate() error {
	return nil
}

var _regex_UserRequest_Id = regexp.MustCompile("^[a-zA-Z]{3,}$")

func (this *UserRequest) Validate() error {
	if !_regex_UserRequest_Id.MatchString(this.Id) {
		return go_proto_validators.FieldError("Id", fmt.Errorf(`User Id must be at least 3 characters and can only include letters`))
	}
	if this.Id == "" {
		return go_proto_validators.FieldError("Id", fmt.Errorf(`User Id must be at least 3 characters and can only include letters`))
	}
	return nil
}

var _regex_CreateUserRequest_Id = regexp.MustCompile("^[a-zA-Z]{3,}$")

func (this *CreateUserRequest) Validate() error {
	if !_regex_CreateUserRequest_Id.MatchString(this.Id) {
		return go_proto_validators.FieldError("Id", fmt.Errorf(`User Id must be at least 3 characters and can only include letters`))
	}
	if this.Id == "" {
		return go_proto_validators.FieldError("Id", fmt.Errorf(`User Id must be at least 3 characters and can only include letters`))
	}
	if this.Email == "" {
		return go_proto_validators.FieldError("Email", fmt.Errorf(`value '%v' must not be an empty string`, this.Email))
	}
	if this.Password == "" {
		return go_proto_validators.FieldError("Password", fmt.Errorf(`value '%v' must not be an empty string`, this.Password))
	}
	return nil
}
