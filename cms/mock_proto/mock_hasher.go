// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thurt/demo-blog-platform/cms/proto (interfaces: HasherServer)

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	"context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	proto "github.com/thurt/demo-blog-platform/cms/proto"
)

// MockHasherServer is a mock of HasherServer interface
type MockHasherServer struct {
	ctrl     *gomock.Controller
	recorder *MockHasherServerMockRecorder
}

// MockHasherServerMockRecorder is the mock recorder for MockHasherServer
type MockHasherServerMockRecorder struct {
	mock *MockHasherServer
}

// NewMockHasherServer creates a new mock instance
func NewMockHasherServer(ctrl *gomock.Controller) *MockHasherServer {
	mock := &MockHasherServer{ctrl: ctrl}
	mock.recorder = &MockHasherServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHasherServer) EXPECT() *MockHasherServerMockRecorder {
	return m.recorder
}

// Hash mocks base method
func (m *MockHasherServer) Hash(arg0 context.Context, arg1 *wrappers.StringValue) (*wrappers.StringValue, error) {
	ret := m.ctrl.Call(m, "Hash", arg0, arg1)
	ret0, _ := ret[0].(*wrappers.StringValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash
func (mr *MockHasherServerMockRecorder) Hash(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockHasherServer)(nil).Hash), arg0, arg1)
}

// Validate mocks base method
func (m *MockHasherServer) Validate(arg0 context.Context, arg1 *proto.StrAndHash) (*empty.Empty, error) {
	ret := m.ctrl.Call(m, "Validate", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockHasherServerMockRecorder) Validate(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockHasherServer)(nil).Validate), arg0, arg1)
}
