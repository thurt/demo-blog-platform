// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thurt/demo-blog-platform/cms/domain (interfaces: Provider)

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	proto "github.com/thurt/demo-blog-platform/cms/proto"
	context "golang.org/x/net/context"
	reflect "reflect"
)

// MockProvider is a mock of Provider interface
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// AdminExists mocks base method
func (m *MockProvider) AdminExists(arg0 context.Context, arg1 *empty.Empty) (*wrappers.BoolValue, error) {
	ret := m.ctrl.Call(m, "AdminExists", arg0, arg1)
	ret0, _ := ret[0].(*wrappers.BoolValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminExists indicates an expected call of AdminExists
func (mr *MockProviderMockRecorder) AdminExists(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminExists", reflect.TypeOf((*MockProvider)(nil).AdminExists), arg0, arg1)
}

// CreateComment mocks base method
func (m *MockProvider) CreateComment(arg0 context.Context, arg1 *proto.CreateCommentRequest) (*proto.CommentRequest, error) {
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.CommentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment
func (mr *MockProviderMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockProvider)(nil).CreateComment), arg0, arg1)
}

// CreatePost mocks base method
func (m *MockProvider) CreatePost(arg0 context.Context, arg1 *proto.CreatePostRequest) (*proto.PostRequest, error) {
	ret := m.ctrl.Call(m, "CreatePost", arg0, arg1)
	ret0, _ := ret[0].(*proto.PostRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost
func (mr *MockProviderMockRecorder) CreatePost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockProvider)(nil).CreatePost), arg0, arg1)
}

// CreateUser mocks base method
func (m *MockProvider) CreateUser(arg0 context.Context, arg1 *proto.CreateUserWithRole) (*proto.UserRequest, error) {
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*proto.UserRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockProviderMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockProvider)(nil).CreateUser), arg0, arg1)
}

// DeleteComment mocks base method
func (m *MockProvider) DeleteComment(arg0 context.Context, arg1 *proto.CommentRequest) (*empty.Empty, error) {
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComment indicates an expected call of DeleteComment
func (mr *MockProviderMockRecorder) DeleteComment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockProvider)(nil).DeleteComment), arg0, arg1)
}

// DeletePost mocks base method
func (m *MockProvider) DeletePost(arg0 context.Context, arg1 *proto.PostRequest) (*empty.Empty, error) {
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePost indicates an expected call of DeletePost
func (mr *MockProviderMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockProvider)(nil).DeletePost), arg0, arg1)
}

// DeleteUser mocks base method
func (m *MockProvider) DeleteUser(arg0 context.Context, arg1 *proto.UserRequest) (*empty.Empty, error) {
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockProviderMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockProvider)(nil).DeleteUser), arg0, arg1)
}

// GetComment mocks base method
func (m *MockProvider) GetComment(arg0 context.Context, arg1 *proto.CommentRequest) (*proto.Comment, error) {
	ret := m.ctrl.Call(m, "GetComment", arg0, arg1)
	ret0, _ := ret[0].(*proto.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment
func (mr *MockProviderMockRecorder) GetComment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockProvider)(nil).GetComment), arg0, arg1)
}

// GetComments mocks base method
func (m *MockProvider) GetComments(arg0 *empty.Empty, arg1 proto.Cms_GetCommentsServer) error {
	ret := m.ctrl.Call(m, "GetComments", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetComments indicates an expected call of GetComments
func (mr *MockProviderMockRecorder) GetComments(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockProvider)(nil).GetComments), arg0, arg1)
}

// GetPost mocks base method
func (m *MockProvider) GetPost(arg0 context.Context, arg1 *proto.PostRequest) (*proto.Post, error) {
	ret := m.ctrl.Call(m, "GetPost", arg0, arg1)
	ret0, _ := ret[0].(*proto.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost
func (mr *MockProviderMockRecorder) GetPost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockProvider)(nil).GetPost), arg0, arg1)
}

// GetPostComments mocks base method
func (m *MockProvider) GetPostComments(arg0 *proto.PostRequest, arg1 proto.Cms_GetPostCommentsServer) error {
	ret := m.ctrl.Call(m, "GetPostComments", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPostComments indicates an expected call of GetPostComments
func (mr *MockProviderMockRecorder) GetPostComments(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostComments", reflect.TypeOf((*MockProvider)(nil).GetPostComments), arg0, arg1)
}

// GetPosts mocks base method
func (m *MockProvider) GetPosts(arg0 *empty.Empty, arg1 proto.Cms_GetPostsServer) error {
	ret := m.ctrl.Call(m, "GetPosts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPosts indicates an expected call of GetPosts
func (mr *MockProviderMockRecorder) GetPosts(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockProvider)(nil).GetPosts), arg0, arg1)
}

// GetUser mocks base method
func (m *MockProvider) GetUser(arg0 context.Context, arg1 *proto.UserRequest) (*proto.User, error) {
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*proto.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockProviderMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockProvider)(nil).GetUser), arg0, arg1)
}

// GetUserComments mocks base method
func (m *MockProvider) GetUserComments(arg0 *proto.UserRequest, arg1 proto.Cms_GetUserCommentsServer) error {
	ret := m.ctrl.Call(m, "GetUserComments", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserComments indicates an expected call of GetUserComments
func (mr *MockProviderMockRecorder) GetUserComments(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserComments", reflect.TypeOf((*MockProvider)(nil).GetUserComments), arg0, arg1)
}

// GetUserPassword mocks base method
func (m *MockProvider) GetUserPassword(arg0 context.Context, arg1 *proto.UserRequest) (*proto.UserPassword, error) {
	ret := m.ctrl.Call(m, "GetUserPassword", arg0, arg1)
	ret0, _ := ret[0].(*proto.UserPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPassword indicates an expected call of GetUserPassword
func (mr *MockProviderMockRecorder) GetUserPassword(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPassword", reflect.TypeOf((*MockProvider)(nil).GetUserPassword), arg0, arg1)
}

// PublishPost mocks base method
func (m *MockProvider) PublishPost(arg0 context.Context, arg1 *proto.PostRequest) (*empty.Empty, error) {
	ret := m.ctrl.Call(m, "PublishPost", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublishPost indicates an expected call of PublishPost
func (mr *MockProviderMockRecorder) PublishPost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPost", reflect.TypeOf((*MockProvider)(nil).PublishPost), arg0, arg1)
}

// UnPublishPost mocks base method
func (m *MockProvider) UnPublishPost(arg0 context.Context, arg1 *proto.PostRequest) (*empty.Empty, error) {
	ret := m.ctrl.Call(m, "UnPublishPost", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnPublishPost indicates an expected call of UnPublishPost
func (mr *MockProviderMockRecorder) UnPublishPost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnPublishPost", reflect.TypeOf((*MockProvider)(nil).UnPublishPost), arg0, arg1)
}

// UpdateComment mocks base method
func (m *MockProvider) UpdateComment(arg0 context.Context, arg1 *proto.UpdateCommentRequest) (*empty.Empty, error) {
	ret := m.ctrl.Call(m, "UpdateComment", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateComment indicates an expected call of UpdateComment
func (mr *MockProviderMockRecorder) UpdateComment(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockProvider)(nil).UpdateComment), arg0, arg1)
}

// UpdatePost mocks base method
func (m *MockProvider) UpdatePost(arg0 context.Context, arg1 *proto.UpdatePostRequest) (*empty.Empty, error) {
	ret := m.ctrl.Call(m, "UpdatePost", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePost indicates an expected call of UpdatePost
func (mr *MockProviderMockRecorder) UpdatePost(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockProvider)(nil).UpdatePost), arg0, arg1)
}
